#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#


library(shiny)
library(shinydashboard)
library(fontawesome)
library(dashboardthemes)
library(shinycssloaders)
library(shinymeta)
library(tidyverse)
library(DT)

sidebarUI <- function(id) {
    ns <- NS(id)
    tagList(
        sidebarMenu(menuItem("Input Files", tabName = "input_files", icon = fa_i(name ="file-alt", verify_fa = FALSE),
                             menuSubItem("File Upload", tabName = "input_files_1"),
                             menuSubItem("Preview", tabName = "input_files_2")),
                    menuItem("Exploratory Tables", tabName = "tables", icon = fa_i(name ="table", verify_fa = FALSE)),
                    menuItem("Recode/Subset Data", tabName = "Recode1", icon = fa_i(name ="sort-alpha-down", verify_fa = FALSE),
                             menuSubItem("Variable Types/Levels", tabName = "FactorLevels"),
                             menuSubItem("Subset/Filter", tabName = "Subset"),
                             menuSubItem("Recode Survival", tabName = "Recode"),
                             menuSubItem("CNA Score Data", tabName = "CNACalc"), 
                             menuSubItem("File Download", tabName = "Data_Down")),
                    menuItem("Exploratory Plots", tabName = "plots", icon = fa_i(name ="chart-bar", verify_fa = FALSE),
                             menuSubItem("Boxplots", tabName = "boxplot", icon = fa_i(name ="align-left", verify_fa = FALSE)),
                             menuSubItem("Scatterplots", tabName = "scatterplot", icon = fa_i(name ="braille", verify_fa = FALSE)),
                             menuSubItem("Barplots", tabName = "Explor", icon = fa_i(name ="chart-bar", verify_fa = FALSE)),
                             menuSubItem("Histograms/Density Plots", tabName = "Dist", icon = fa_i(name ="chart-area", verify_fa = FALSE))), 
                    menuItem("Kaplan-Meier Plots", tabName = "survival", icon = fa_i(name ="heartbeat", verify_fa = FALSE),
                             menuSubItem("KM Plot Clinical Variables", tabName = "KMplot"),
                             menuSubItem("KM Plot CNA Score", tabName = "KMOver"),
                             menuSubItem("KM Plot by Treatment", tabName = "KMplotRadio")),
                    menuItem("Association Tests", tabName = "ASTest", icon = fa_i(name ="connectdevelop", verify_fa = FALSE)),
                    menuItem("Cox PH Models", tabName = "Cox", icon = fa_i(name ="file-medical-alt", verify_fa = FALSE),
                             menuSubItem("Univariate Cox Models", tabName = "UniVar"),
                             menuSubItem("Multivariable Cox Models", tabName = "MultiVar"),
                             menuSubItem("Cox Model Assumptions", tabName = "AssumptionsOS")),
                    menuItem("Adjusted Survival Curves", tabName = "AdjSurvival", icon = fa_i(name ="heartbeat", verify_fa = FALSE)),
                    menuItem("Survival Trees", tabName = "SurvTrees", icon = fa_i(name ="tree", verify_fa = FALSE),
                             menuSubItem("Rpart", tabName = "RpartTree"),
                             menuSubItem("Ctree", tabName = "STreeCtree")),
                    menuItem("Maftools Summary", tabName = "MAFplots", icon = fa_i(name ="exclamation-triangle", verify_fa = FALSE),
                             menuSubItem("MAF Text Summary", tabName = "MAFText"),
                             menuSubItem("MAF Visual Summary", tabName = "MAFVis")),
                    menuItem("Download Code/Log", tabName = "downlog", icon = fa_i(name ="file-download", verify_fa = FALSE))
        )
    )
}

Tab1UI <- function(i22) {
    ns <- NS(i22)
    tagList(tabItems(tabItem(tabName = "input_files_1",
                 tabBox(width = "1000px",
                        
                        # Manual Upload tab
                        tabPanel("Manual Upload",
                                 fluidRow(box(title = "Input Patient Data File", width = 3, status = "primary", solidHeader = TRUE, collapsible = TRUE,
                                              fileInput(ns("Input_Patient_File"), "Choose File:", multiple = TRUE, accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")), tags$hr(),
                                              prettyToggle(inputId = ns("Tab1_Clin_Header_Yes_or_No"), label_on = "Header", label_off = "Header", icon_on = fa_i(name ="check", verify_fa = FALSE), icon_off = fa_i(name ="times", verify_fa = FALSE), value = T, outline = T, shape = c("curve"),  status_on = "primary"), # Input: Checkbox if file has header
                                              fluidRow(column(7, awesomeRadio(inputId = ns("Tab1_Clin_Separator"), label = "Separator:", c(Comma = ",", Semicolon = ";", Tab = "\t"), selected = "\t", inline = F, status = "primary")), # Input: Select Separator:
                                                       column(5, awesomeRadio(ns("Tab1_Clin_Quote"), "Quote:", choices = c(None = "", "Double" = '"', "Single" = "'"), selected = '"', inline = F, status = "primary"))), # Input: Select quotes
                                              numericInput(inputId = ns("Tab1_Clin_Skip_Lines"), label = "Number of Lines to Skip:", value = 4, min = 0, max = 10), tags$hr(), # Input: Choose number of lines to skip
                                              h5(strong("Total Number of Clinical Variables:")), verbatimTextOutput('TotalC', placeholder = T),  # Space to display number of rows/columns
                                              h5(strong("Total Number of Patients:")), 
                                              tags$style(HTML('table.dataTable.hover tbody tr:hover, table.dataTable.display tbody tr:hover {background-color: rgba(44,222,235) !important;}')),
                                              verbatimTextOutput('TotalR', placeholder = T))))))))}


Tab2UI <- function(id2) {
    ns <- NS(id2)
    tagList(tabItems(tabItem(tabName = "input_files_2",
                    tabBox(width = "1000px",
                           
                           # Preview Clinical Data
                           tabPanel("Clinical Data",
                                    fluidRow(box(collapsible = T, title = "Preview", width = 12, status = "primary", solidHeader = TRUE,  shinyjs::useShinyjs(),
                                                 textOutput("text"), withSpinner(DT::dataTableOutput("ClinicalAll")), style = "height:800px")))))))}
    
    
    
    


# Define UI for application
ui <- dashboardPage( 
    
    # Set title, title width, logo 
    header = dashboardHeader(title = tagList(span(class = "logo-lg", "GNOSIS"))), 
    
    # Create side-bar menu with all tab options:
    sidebar = dashboardSidebar(tags$style(".left-side, .main-sidebar {padding-top: 60px}"), width = 195,
                               sidebarUI("sidebar")),
    
    # Set up theme - use custom theme and import css file
    body = dashboardBody(
        shinyDashboardThemes(theme = "blue_gradient"),
        tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "Style_File.css")), 
        tags$head(tags$style(HTML('.wrapper {height: auto !important; position:relative; overflow-x:hidden; overflow-y:hidden}'))),
        Tab1UI("step2"),
        Tab2UI("tab2")
        
    )
)


