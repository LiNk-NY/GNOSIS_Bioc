#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

histogramServer <- function(id) {
    moduleServer(id, function(input, output, session) {
        data <- reactive(mtcars[[input$var]])
        output$hist <- renderPlot({
            hist(data(), breaks = input$bins, main = input$var)
        }, res = 96)
    })
}

LoadData <- function(id3) {
    ns <- NS(id3)
    moduleServer(id3, function(input, output, session) {
        
         metaReactive2({req(input$Input_Patient_File)
            metaExpr({read.delim(..(input$Input_Patient_File$datapath), header = ..(input$Tab1_Clin_Header_Yes_or_No), sep = ..(input$Tab1_Clin_Separator), quote = ..(input$Tab1_Clin_Quote), na.strings=c(""," ","NA"), skip = ..(input$Tab1_Clin_Skip_Lines))}) })
        
    })
}

mod_dataInput_server <- function(p) {
    ns <- NS(p)
    
    moduleServer(p, function(input, output, session) {
        
        userFile <- reactive({
            req(input$Input_Patient_File)
            input$Input_Patient_File
        })    
        
        datafile <- reactive({
            read.delim(userFile()$datapath, header = input$Tab1_Clin_Header_Yes_or_No, sep = input$Tab1_Clin_Separator, quote = input$Tab1_Clin_Quote, na.strings=c(""," ","NA"), skip = input$Tab1_Clin_Skip_Lines)
        })
 
        return(datafile)
    })
    
}



   
# Define server logic 
shinyServer(function(input, output, session) {
    
    ## For Input Log
  #  track_usage(store_null(console = FALSE))
    
    ## Tab 1 - Input Files (Upload ourselves or use API)
    # 1) Input Clinical Patient File from cBioPortal: can specify header, sep, quote and Tab3_Segment_CNA_Yes_or_No of lines to skip (default = tab, double quote, skip 4)
   dta <- mod_dataInput_server("step2")
   
   
   prin <- reactive({
       print(dta())
   })
   
    Tot_Pat_Col <- metaReactive2({metaExpr({ncol(..(dta()))}) })
    
    Tot_Pat_Row <- metaReactive2({if(is.null(input$Input_Patient_File) | !is.null(input$cBioData_rows_selected)){
        return(NULL)} else { metaExpr({nrow(..( LoadData("hist1"))) }) } })
    
    output$TotalC <- metaRender(renderPrint, {..( Tot_Pat_Col() )})
    output$TotalR <- metaRender(renderPrint, {..( LoadData("hist1"))})
    
    dataInputClinicalP <- reactive({
        LoadData("hist1")
    })
    
    dataClinical <- metaReactive2({
        if(is.null(input$Input_Sample_File) & !is.null(input$Input_Patient_File) & is.null(input$cBioData_rows_selected)) {
            validate(need(ncol(dataInputClinicalP()) > 2, "Inputted file only has one column, please select file delimiters and options carefully."))
            validate(need("PATIENT_ID" %in% colnames(dataInputClinicalP()), "Inputted file does not have PATIENT_ID information - Are you using the right file?"))
            metaExpr({..(dataInputClinicalP())} )}
        else if(is.null(input$Input_Patient_File) & !is.null(input$Input_Sample_File) & is.null(input$cBioData_rows_selected)){
            validate(need(ncol(dataInputClinicalS()) > 2, "Inputted file only has one column, please select file delimiters and options carefully."))
            validate(need("PATIENT_ID" %in% colnames(dataInputClinicalS()), "Inputted file does not have PATIENT_ID information - Are you using the right file?"))
            metaExpr({..(dataInputClinicalS())})
        } else if(is.null(input$Input_Sample_File) & is.null(input$Input_Patient_File) & is.null(input$cBioData_rows_selected)){
            validate(need(!is.null(input$cBioData_rows_selected) |  !is.null(input$Input_Sample_File) | !is.null(input$Input_Patient_File), "Please select cBioPortal dataset or upload your own data."))
        } else if(!is.null(input$Input_Sample_File) & !is.null(input$Input_Patient_File) & is.null(input$cBioData_rows_selected)){ 
            validate(need(ncol(dataInputClinicalP()) > 2, "Inputted file only has one column, please select file delimiters and options carefully."))
            validate(need("PATIENT_ID" %in% colnames(dataInputClinicalP()), "Inputted file does not have PATIENT_ID information - Are you using the right file?"))
            validate(need(ncol(dataInputClinicalS()) > 2, "Inputted file only has one column, please select file delimiters and options carefully."))
            validate(need("PATIENT_ID" %in% colnames(dataInputClinicalS()), "Inputted file does not have PATIENT_ID information - Are you using the right file?"))
            metaExpr({merge(..(dataInputClinicalP()), ..(dataInputClinicalS()), by.x = "PATIENT_ID", by.y="PATIENT_ID") }) 
        } else if(is.null(input$Input_Sample_File) & is.null(input$Input_Patient_File) & !is.null(input$cBioData_rows_selected)){
            validate(need(!is.null(input$cBioData_rows_selected), "Please select cBioPortal dataset."))
            metaExpr({dat <- as.data.frame(..(data_cBioPortal())@colData)
            rownames(dat) = NULL
            dat})
        } else {
            validate(need(is.null(input$cBioData_rows_selected) |  c(is.null(input$Input_Sample_File) & is.null(input$Input_Patient_File)), "Please only select cBioPortal dataset OR upload your own data."))
        }
    })
    
  
    
    output$ClinicalAll <- metaRender(renderDataTable, {
        datatable(..(dataClinical()), options = list(lengthMenu = c(10, 30, 50, 100), pageLength = 30, scrollX = TRUE, scrollY = "650px"))})
    
    
    
})