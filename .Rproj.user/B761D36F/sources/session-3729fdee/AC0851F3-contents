---
title: "CRT_Conf_Poster_2022"
output: html_document
date: "2022-11-17"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r Load up libraries}
library(MESS)
library(tidyverse)
library(operator.tools)
library(ds4psy)
library(data.table)
library(car)
library(ggpubr)
library(ggplot2)

source("/home/lydia/Simulate_Data_Function.R")
```

```{r Data Scenario 1-4}
## Create Data Scenario 1
Data_Scenario_1 <- Sim_Function(Sample_Size = c(20, 50, 100), Percent_NoAlt = c(90), Percent_Amp_NoDel = c(0), Percent_NoAmp_Del = c(0), Percent_FP = c(10), SimData = 20,  len1 = 2000, len2 = 2000)

Data_Scenario_2 <- Sim_Function(Sample_Size = c(20, 50, 100), Percent_NoAlt = c(80), Percent_Amp_NoDel = c(10), Percent_NoAmp_Del = c(10), Percent_FP = c(0), SimData = 20,  len1 = 2000, len2 = 2000)

Data_Scenario_3 <- Sim_Function(Sample_Size = c(20, 50, 100), Percent_NoAlt = c(75), Percent_Amp_NoDel = c(20), Percent_NoAmp_Del = c(5), Percent_FP = c(0), SimData = 20,  len1 = 2000, len2 = 2000)

Sample_Size <- c(20, 50, 100)
```

```{r Results for each Scenario 1}
## Set up Empty Dataframe
results_TS <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())
results_TE <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())
results_Multi <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())

sig.val <- 0.05
Data_List_Half <- list()
List <- list()
Data_List_Half_MV <- list()
List_MV <- list()

for(k in 1:length(Sample_Size)){
  Data_Prop <- c()
  Half_Caught <- c()
  Results <- c()
  
  Data_Prop_MV <- c()
  Half_Caught_MV <- c()
  Results_MV <- c()
  
  Sample_Data <- Data_Scenario_1[[k]]$`Percentage: 90/0/0/10`
  
  for(i in 1:length(Sample_Data)){
    TS <- lm(Towards.Start ~ 1, data = Sample_Data[[i]])
    TE <- lm(Towards.End ~ 1, data = Sample_Data[[i]])
    
    results_TS <- rbind.data.frame(results_TS, data.frame("x" = paste("Dataset", i, sep = " "), "y" = unname(TS$coefficients), "ylo" = confint(TS, '(Intercept)', level=0.95)[1], "yhi" = confint(TS, '(Intercept)', level=0.95)[2], "sigma" = sigma(TS), "Size" = paste("n =", Sample_Size[k]))) 
    results_TE <- rbind.data.frame(results_TE, data.frame("x" = paste("Dataset", i, sep = " "), "y" = unname(TE$coefficients), "ylo" = confint(TE, '(Intercept)', level=0.95)[1], "yhi" = confint(TE, '(Intercept)', level=0.95)[2], "sigma" = sigma(TE),  "Size" = paste("n =", Sample_Size[k])))
    
    
    if(signif(summary(TS)$coefficients[[4]], digits = 4) < sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) < sig.val){
      Results <- c(Results, paste("Amp = Yes", ", ", "Del = Yes", sep=""))
    } else if(signif(summary(TS)$coefficients[[4]], digits = 4) >= sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) < sig.val){
      Results <- c(Results, paste("Amp = No", ", ", "Del = Yes", sep=""))
    } else if(signif(summary(TS)$coefficients[[4]], digits = 4) < sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) >= sig.val){
      Results <- c(Results, paste("Amp = Yes", ", ", "Del = No", sep=""))
    } else {
      Results <- c(Results, paste("Amp = No", ", ", "Del = No", sep=""))
    }
    
    Both_Test <- lm(cbind(Towards.Start, Towards.End) ~ 1, data = Sample_Data[[i]])
    lh.out <- linearHypothesis(Both_Test, hypothesis.matrix = c("(Intercept) = 0"))
    
    an <- anova(Both_Test)
    
    if(signif(as.numeric(an$`Pr(>F)`)[[1]], digits = 4) < sig.val){
      Results_MV <- c(Results_MV, paste("Amp = Yes", ", ", "Del = Yes", sep=""))
    } else {
      Results_MV <- c(Results_MV, paste("Amp = No", ", ", "Del = No", sep=""))
    }
  }
  
  Data_Prop <- c(Data_Prop, length(which(Results == "Amp = Yes, Del = Yes"))/20)
  Half_Caught <- data.frame("Yes" = length(which(Results == "Amp = Yes, Del = Yes")), "Half_Amp" = length(which(Results %in% c("Amp = Yes, Del = No"))), "Half_Del" = length(which(Results %in% c("Amp = No, Del = Yes"))), "No" = length(which(Results == "Amp = No, Del = No")), "Alt_Detect" = 0)
  Data_List_Half[[paste(Sample_Size[k], " 90/0/0/10",  sep=":")]] <- Half_Caught
  Data_Prop <- as.data.frame(Data_Prop)
  names(Data_Prop) <- "PropDis"
  Data_Prop <- Data_Prop %>% mutate(Prop = factor(paste(c(25), "%", sep =""), levels =  c(paste(c(25), "%", sep =""))))
  List[[k]] <- Data_Prop
  
  Data_Prop_MV <- c(Data_Prop_MV, length(which(Results_MV == "Amp = Yes, Del = Yes"))/20)
  Half_Caught_MV <- data.frame("Yes" = 0, "Half_Amp" = length(which(Results_MV %in% c("Amp = Yes, Del = No"))), "Half_Del" = length(which(Results_MV %in% c("Amp = No, Del = Yes"))), "No" = length(which(Results_MV == "Amp = No, Del = No")),  "Alt_Detect" = length(which(Results_MV == "Amp = Yes, Del = Yes")))
  Data_List_Half_MV[[paste(Sample_Size[k], " 90/0/0/10",  sep=":")]] <- Half_Caught_MV
  Data_Prop_MV <- as.data.frame(Data_Prop_MV)
  names(Data_Prop_MV) <- "PropDis"
  Data_Prop_MV <- Data_Prop_MV %>% mutate(Prop = factor(paste(c(25), "%", sep =""), levels =  c(paste(c(25), "%", sep =""))))
  List_MV[[k]] <- Data_Prop_MV
}

Data_List_Half_1 <- Data_List_Half
Data_List_Half_MV_1 <- Data_List_Half_MV
Results_TS_1 <- results_TS
Results_TE_1 <- results_TE
```

```{r Results for each Scenario 2}
## Set up Empty Dataframe
results_TS <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())
results_TE <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())
results_Multi <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())

sig.val <- 0.05
Data_List_Half <- list()
List <- list()
Data_List_Half_MV <- list()
List_MV <- list()

for(k in 1:length(Sample_Size)){
  Data_Prop <- c()
  Half_Caught <- c()
  Results <- c()
  
  Data_Prop_MV <- c()
  Half_Caught_MV <- c()
  Results_MV <- c()
  
  Sample_Data <- Data_Scenario_2[[k]]$`Percentage: 80/10/10/0`
  
  for(i in 1:length(Sample_Data)){
    TS <- lm(Towards.Start ~ 1, data = Sample_Data[[i]])
    TE <- lm(Towards.End ~ 1, data = Sample_Data[[i]])
    
    results_TS <- rbind.data.frame(results_TS, data.frame("x" = paste("Dataset", i, sep = " "), "y" = unname(TS$coefficients), "ylo" = confint(TS, '(Intercept)', level=0.95)[1], "yhi" = confint(TS, '(Intercept)', level=0.95)[2], "sigma" = sigma(TS), "Size" = paste("n =", Sample_Size[k]))) 
    results_TE <- rbind.data.frame(results_TE, data.frame("x" = paste("Dataset", i, sep = " "), "y" = unname(TE$coefficients), "ylo" = confint(TE, '(Intercept)', level=0.95)[1], "yhi" = confint(TE, '(Intercept)', level=0.95)[2], "sigma" = sigma(TE),  "Size" = paste("n =", Sample_Size[k])))
    
    
    if(signif(summary(TS)$coefficients[[4]], digits = 4) < sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) < sig.val){
      Results <- c(Results, paste("Amp = Yes", ", ", "Del = Yes", sep=""))
    } else if(signif(summary(TS)$coefficients[[4]], digits = 4) >= sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) < sig.val){
      Results <- c(Results, paste("Amp = No", ", ", "Del = Yes", sep=""))
    } else if(signif(summary(TS)$coefficients[[4]], digits = 4) < sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) >= sig.val){
      Results <- c(Results, paste("Amp = Yes", ", ", "Del = No", sep=""))
    } else {
      Results <- c(Results, paste("Amp = No", ", ", "Del = No", sep=""))
    }
    
    Both_Test <- lm(cbind(Towards.Start, Towards.End) ~ 1, data = Sample_Data[[i]])
    lh.out <- linearHypothesis(Both_Test, hypothesis.matrix = c("(Intercept) = 0"))
    
    an <- anova(Both_Test)
    
    if(signif(as.numeric(an$`Pr(>F)`)[[1]], digits = 4) < sig.val){
      Results_MV <- c(Results_MV, paste("Amp = Yes", ", ", "Del = Yes", sep=""))
    } else {
      Results_MV <- c(Results_MV, paste("Amp = No", ", ", "Del = No", sep=""))
    }
  }
  
  Data_Prop <- c(Data_Prop, length(which(Results == "Amp = Yes, Del = Yes"))/20)
  Half_Caught <- data.frame("Yes" = length(which(Results == "Amp = Yes, Del = Yes")), "Half_Amp" = length(which(Results %in% c("Amp = Yes, Del = No"))), "Half_Del" = length(which(Results %in% c("Amp = No, Del = Yes"))), "No" = length(which(Results == "Amp = No, Del = No")), "Alt_Detect" = 0)
  Data_List_Half[[paste(Sample_Size[k], " 80/10/10/0",  sep=":")]] <- Half_Caught
  Data_Prop <- as.data.frame(Data_Prop)
  names(Data_Prop) <- "PropDis"
  Data_Prop <- Data_Prop %>% mutate(Prop = factor(paste(c(25), "%", sep =""), levels =  c(paste(c(25), "%", sep =""))))
  List[[k]] <- Data_Prop
  
  Data_Prop_MV <- c(Data_Prop_MV, length(which(Results_MV == "Amp = Yes, Del = Yes"))/20)
   Half_Caught_MV <- data.frame("Yes" = 0, "Half_Amp" = length(which(Results_MV %in% c("Amp = Yes, Del = No"))), "Half_Del" = length(which(Results_MV %in% c("Amp = No, Del = Yes"))), "No" = length(which(Results_MV == "Amp = No, Del = No")),  "Alt_Detect" = length(which(Results_MV == "Amp = Yes, Del = Yes")))
  Data_List_Half_MV[[paste(Sample_Size[k], " 80/10/10/0",  sep=":")]] <- Half_Caught_MV
  Data_Prop_MV <- as.data.frame(Data_Prop_MV)
  names(Data_Prop_MV) <- "PropDis"
  Data_Prop_MV <- Data_Prop_MV %>% mutate(Prop = factor(paste(c(25), "%", sep =""), levels =  c(paste(c(25), "%", sep =""))))
  List_MV[[k]] <- Data_Prop_MV
}

Data_List_Half_2 <- Data_List_Half
Data_List_Half_MV_2 <- Data_List_Half_MV
Results_TS_2 <- results_TS
Results_TE_2 <- results_TE
```

```{r Results for each Scenario 3}
## Set up Empty Dataframe
results_TS <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())
results_TE <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())
results_Multi <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())

sig.val <- 0.05
Data_List_Half <- list()
List <- list()
Data_List_Half_MV <- list()
List_MV <- list()

for(k in 1:length(Sample_Size)){
  Data_Prop <- c()
  Half_Caught <- c()
  Results <- c()
  
  Data_Prop_MV <- c()
  Half_Caught_MV <- c()
  Results_MV <- c()
  
  Sample_Data <- Data_Scenario_3[[k]]$`Percentage: 75/20/5/0`
  
  for(i in 1:length(Sample_Data)){
    TS <- lm(Towards.Start ~ 1, data = Sample_Data[[i]])
    TE <- lm(Towards.End ~ 1, data = Sample_Data[[i]])
    
    results_TS <- rbind.data.frame(results_TS, data.frame("x" = paste("Dataset", i, sep = " "), "y" = unname(TS$coefficients), "ylo" = confint(TS, '(Intercept)', level=0.95)[1], "yhi" = confint(TS, '(Intercept)', level=0.95)[2], "sigma" = sigma(TS), "Size" = paste("n =", Sample_Size[k]))) 
    results_TE <- rbind.data.frame(results_TE, data.frame("x" = paste("Dataset", i, sep = " "), "y" = unname(TE$coefficients), "ylo" = confint(TE, '(Intercept)', level=0.95)[1], "yhi" = confint(TE, '(Intercept)', level=0.95)[2], "sigma" = sigma(TE),  "Size" = paste("n =", Sample_Size[k])))
    
    
    if(signif(summary(TS)$coefficients[[4]], digits = 4) < sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) < sig.val){
      Results <- c(Results, paste("Amp = Yes", ", ", "Del = Yes", sep=""))
    } else if(signif(summary(TS)$coefficients[[4]], digits = 4) >= sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) < sig.val){
      Results <- c(Results, paste("Amp = No", ", ", "Del = Yes", sep=""))
    } else if(signif(summary(TS)$coefficients[[4]], digits = 4) < sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) >= sig.val){
      Results <- c(Results, paste("Amp = Yes", ", ", "Del = No", sep=""))
    } else {
      Results <- c(Results, paste("Amp = No", ", ", "Del = No", sep=""))
    }
    
    Both_Test <- lm(cbind(Towards.Start, Towards.End) ~ 1, data = Sample_Data[[i]])
    lh.out <- linearHypothesis(Both_Test, hypothesis.matrix = c("(Intercept) = 0"))
    
    an <- anova(Both_Test)
    
    if(signif(as.numeric(an$`Pr(>F)`)[[1]], digits = 4) < sig.val){
      Results_MV <- c(Results_MV, paste("Amp = Yes", ", ", "Del = Yes", sep=""))
    } else {
      Results_MV <- c(Results_MV, paste("Amp = No", ", ", "Del = No", sep=""))
    }
  }
  
  Data_Prop <- c(Data_Prop, length(which(Results == "Amp = Yes, Del = Yes"))/20)
  Half_Caught <- data.frame("Yes" = length(which(Results == "Amp = Yes, Del = Yes")), "Half_Amp" = length(which(Results %in% c("Amp = Yes, Del = No"))), "Half_Del" = length(which(Results %in% c("Amp = No, Del = Yes"))), "No" = length(which(Results == "Amp = No, Del = No")), "Alt_Detect" = 0)
  Data_List_Half[[paste(Sample_Size[k], " 75/20/5/0",  sep=":")]] <- Half_Caught
  Data_Prop <- as.data.frame(Data_Prop)
  names(Data_Prop) <- "PropDis"
  Data_Prop <- Data_Prop %>% mutate(Prop = factor(paste(c(25), "%", sep =""), levels =  c(paste(c(25), "%", sep =""))))
  List[[k]] <- Data_Prop
  
  Data_Prop_MV <- c(Data_Prop_MV, length(which(Results_MV == "Amp = Yes, Del = Yes"))/20)
  Half_Caught_MV <- data.frame("Yes" = 0, "Half_Amp" = length(which(Results_MV %in% c("Amp = Yes, Del = No"))), "Half_Del" = length(which(Results_MV %in% c("Amp = No, Del = Yes"))), "No" = length(which(Results_MV == "Amp = No, Del = No")),  "Alt_Detect" = length(which(Results_MV == "Amp = Yes, Del = Yes")))
  Data_List_Half_MV[[paste(Sample_Size[k], " 75/20/5/0",  sep=":")]] <- Half_Caught_MV
  Data_Prop_MV <- as.data.frame(Data_Prop_MV)
  names(Data_Prop_MV) <- "PropDis"
  Data_Prop_MV <- Data_Prop_MV %>% mutate(Prop = factor(paste(c(25), "%", sep =""), levels =  c(paste(c(25), "%", sep =""))))
  List_MV[[k]] <- Data_Prop_MV
}

Data_List_Half_3 <- Data_List_Half
Data_List_Half_MV_3 <- Data_List_Half_MV
Results_TS_3 <- results_TS
Results_TE_3 <- results_TE
```

```{r Combine all data}
Results_TS_1 <- Results_TS_1 %>% mutate(x = factor(x, levels = c(paste("Dataset", 1:20, sep=" ")))) %>% mutate("Test" = "T1") %>%  mutate(n = factor(Size, levels = unique(Size)))
Results_TE_1 <- Results_TE_1 %>% mutate(x = factor(x, levels = c(paste("Dataset", 1:20, sep=" ")))) %>% mutate("Test" = "T2") %>%  mutate(n = factor(Size, levels = unique(c(Size))))

results_1 <- rbind.data.frame(Results_TS_1, Results_TE_1)

Results_TS_2 <- Results_TS_2 %>% mutate(x = factor(x, levels = c(paste("Dataset", 1:20, sep=" ")))) %>% mutate("Test" = "T1") %>%  mutate(n = factor(Size, levels = unique(Size)))
Results_TE_2 <- Results_TE_2 %>% mutate(x = factor(x, levels = c(paste("Dataset", 1:20, sep=" ")))) %>% mutate("Test" = "T2") %>%  mutate(n = factor(Size, levels = unique(c(Size))))
results_2 <- rbind.data.frame(Results_TS_2, Results_TE_2)

Results_TS_3 <- Results_TS_3 %>% mutate(x = factor(x, levels = c(paste("Dataset", 1:20, sep=" ")))) %>% mutate("Test" = "T1") %>%  mutate(n = factor(Size, levels = unique(Size)))
Results_TE_3 <- Results_TE_3 %>% mutate(x = factor(x, levels = c(paste("Dataset", 1:20, sep=" ")))) %>% mutate("Test" = "T2") %>%  mutate(n = factor(Size, levels = unique(c(Size))))
results_3 <- rbind.data.frame(Results_TS_3, Results_TE_3)

results_1 <- results_1 %>% mutate("Scenario" = "Scenario 1")
results_2 <- results_2 %>% mutate("Scenario" = "Scenario 2")
results_3 <- results_3 %>% mutate("Scenario" = "Scenario 3")

Total_Results <- rbind.data.frame(results_1, results_2, results_3)
```

```{r Plot 1 CI}
#Total_Results <- Total_Results %>% mutate(Test = factor(Test, levels = "TS#", "TE"))

p_1 <- Total_Results %>% filter(Scenario == "Scenario 1") %>% ggplot(aes(x=x, y=y, ymin=ylo, ymax=yhi, color = Test)) +
  geom_pointrange(position=position_dodge(width=0.6))+
  geom_hline(yintercept = 0, linetype=2, size = 0.8)+
  coord_flip() +  xlab('') + ylab("Intercept Values")  + ggtitle("") + theme(plot.title = element_text(hjust = 0.5, margin=margin(0,0,-15,0))) + scale_color_discrete("Alteration:  ", labels = c("CNA Length Prior   ", "CNA Length Post")) + facet_wrap(~n, ncol =3) +  theme(axis.text.y = element_text(size = 14)) +  theme(axis.text.x = element_text(size = 18)) +  theme(legend.text = element_text(size = 21))+ theme(strip.text.x = element_text(size = 20)) + theme(legend.title = element_text(size=21)) + theme(axis.title.x = element_text(size=22)) + labs(subtitle = "Scenario 1") + theme(plot.subtitle=element_text(hjust=0.5, size= 23, face="bold")) + theme(legend.position = c("top"), legend.direction = "horizontal") + theme(axis.title.x = element_text(size=20), legend.spacing.x = unit(0.6, 'cm'))

p_2 <- Total_Results %>% filter(Scenario == "Scenario 2") %>% ggplot(aes(x=x, y=y, ymin=ylo, ymax=yhi, color = Test)) +
  geom_pointrange(position=position_dodge(width=0.6))+
  geom_hline(yintercept = 0, linetype=2, size = 0.8)+
  coord_flip() +  xlab('') + ylab("Intercept Values")  + ggtitle("") + theme(plot.title = element_text(hjust = 0.5, margin=margin(0,0,-15,0))) + facet_wrap(~n, ncol =3) +  theme(axis.text.y = element_text(size = 14)) +  theme(axis.text.x = element_text(size = 18)) +  theme(legend.text = element_text(size = 21))+ theme(strip.text.x = element_text(size = 20)) + theme(legend.title = element_text(size=21)) + theme(axis.title.x = element_text(size=22)) + labs(subtitle = "Scenario 2") + theme(plot.subtitle=element_text(hjust=0.5, size= 23, face="bold")) + theme(legend.position = c("top"), legend.direction = "horizontal") + theme(axis.title.x = element_text(size=20), legend.spacing.x = unit(0.6, 'cm'))

p_3 <- Total_Results %>% filter(Scenario == "Scenario 3") %>% ggplot(aes(x=x, y=y, ymin=ylo, ymax=yhi, color = Test)) +
  geom_pointrange(position=position_dodge(width=0.6))+
  geom_hline(yintercept = 0, linetype=2, size = 0.8)+
  coord_flip() +  xlab('') + ylab("Intercept Values") + ggtitle("") + theme(plot.title = element_text(hjust = 0.5, margin=margin(0,0,-15,0))) + facet_wrap(~n, ncol =3) +  theme(axis.text.y = element_text(size = 14)) +  theme(axis.text.x = element_text(size = 18)) +  theme(legend.text = element_text(size = 21))+ theme(strip.text.x = element_text(size = 20)) + theme(legend.title = element_text(size=21)) + theme(axis.title.x = element_text(size=22)) + labs(subtitle = "Scenario 3") + theme(plot.subtitle=element_text(hjust=0.5, size= 23, face="bold")) + theme(legend.position = c("top"), legend.direction = "horizontal") + theme(axis.title.x = element_text(size=20), legend.spacing.x = unit(0.6, 'cm'))

p_1
plot <- arrange <- ggarrange(p_1, p_2, p_3, nrow=3, common.legend = T, legend = "top")

anno <- annotate_figure(plot, top = text_grob(bquote(bold("Forest Plot of Confidence Intervals for each "*β[CNALPrior]*" and "*β[CNALPost]*"")), color = "black", face = "bold", size = 28))

ggsave("ICBG_CIPlot.png", anno, height = 18, width = 16)
```

```{r Plot Barplot}
List_1 <- rbindlist(Data_List_Half_1, idcol = "index")
List_1 <- List_1 %>% mutate(Dataset = "SLR (T-test)")
List_1_MV <- rbindlist(Data_List_Half_MV_1, idcol = "index")
List_1_MV <- List_1_MV %>% mutate(Dataset = "MLR (Pillai’s Trace)")
List_1_All <- rbind.data.frame(List_1, List_1_MV)
List_1_All <- List_1_All %>% mutate(Dataset = factor(Dataset, levels = c("SLR (T-test)", "MLR (Pillai’s Trace)")))
List_1_All <- List_1_All %>% mutate("Scenario" = "Scenario 1")
List_1_All <- melt(List_1_All)
List_1_All <- List_1_All %>% mutate("Proportion" = index) %>% mutate("SampleSize" = gsub(":.*$", "", index)) %>% mutate("Proportion" = gsub(".*\\/", "", index)) %>% mutate(Proportion = paste(Proportion, "%", sep="")) %>% mutate(SampleSize = paste("n = ", SampleSize, sep=""))  %>% mutate(SampleSize = factor(SampleSize, levels =  c("n = 20","n = 30", "n = 50", "n = 80", "n = 100", "n = 200", "n = 500", "n = 1000", "n = 2000"))) %>% mutate(Proportion = factor(Proportion, levels =  c("3%", "5%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "95%")))

List_2 <- rbindlist(Data_List_Half_2, idcol = "index")
List_2 <- List_2 %>% mutate(Dataset =  "SLR (T-test)")
List_2_MV <- rbindlist(Data_List_Half_MV_2, idcol = "index")
List_2_MV <- List_2_MV %>% mutate(Dataset = "MLR (Pillai’s Trace)")
List_2_All <- rbind.data.frame(List_2, List_2_MV)
List_2_All <- List_2_All %>% mutate(Dataset = factor(Dataset, levels = c( "SLR (T-test)", "MLR (Pillai’s Trace)")))
List_2_All <- List_2_All %>% mutate("Scenario" = "Scenario 2")
List_2_All <- melt(List_2_All)
List_2_All <- List_2_All %>% mutate("Proportion" = index) %>% mutate("SampleSize" = gsub(":.*$", "", index)) %>% mutate("Proportion" = gsub(".*\\/", "", index)) %>% mutate(Proportion = paste(Proportion, "%", sep="")) %>% mutate(SampleSize = paste("n = ", SampleSize, sep=""))  %>% mutate(SampleSize = factor(SampleSize, levels =  c("n = 20","n = 30", "n = 50", "n = 80", "n = 100", "n = 200", "n = 500", "n = 1000", "n = 2000"))) %>% mutate(Proportion = factor(Proportion, levels =  c("3%", "5%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "95%")))

List_3 <- rbindlist(Data_List_Half_3, idcol = "index")
List_3 <- List_3 %>% mutate(Dataset =  "SLR (T-test)")
List_3_MV <- rbindlist(Data_List_Half_MV_3, idcol = "index")
List_3_MV <- List_3_MV %>% mutate(Dataset = "MLR (Pillai’s Trace)")
List_3_All <- rbind.data.frame(List_3, List_3_MV)
List_3_All <- List_3_All %>% mutate(Dataset = factor(Dataset, levels = c( "SLR (T-test)", "MLR (Pillai’s Trace)")))
List_3_All <- List_3_All %>% mutate("Scenario" = "Scenario 3")
List_3_All <- melt(List_3_All)
List_3_All <- List_3_All %>% mutate("Proportion" = index) %>% mutate("SampleSize" = gsub(":.*$", "", index)) %>% mutate("Proportion" = gsub(".*\\/", "", index)) %>% mutate(Proportion = paste(Proportion, "%", sep="")) %>% mutate(SampleSize = paste("n = ", SampleSize, sep=""))  %>% mutate(SampleSize = factor(SampleSize, levels =  c("n = 20","n = 30", "n = 50", "n = 80", "n = 100", "n = 200", "n = 500", "n = 1000", "n = 2000"))) %>% mutate(Proportion = factor(Proportion, levels =  c("3%", "5%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "95%")))
```

```{r Plot}

List_1_All <- List_1_All %>% mutate(variable = factor(variable, levels = c("Yes", "Alt_Detect", "Half_Amp", "Half_Del", "No")))
List_2_All <- List_2_All %>% mutate(variable = factor(variable, levels = c("Yes", "Alt_Detect", "Half_Amp", "Half_Del", "No")))
List_3_All <- List_3_All %>% mutate(variable = factor(variable, levels = c("Yes", "Alt_Detect", "Half_Amp", "Half_Del", "No")))

p_1 <- ggplot(List_1_All, aes(x=SampleSize, y=value, colour = variable, group = variable, fill = variable)) +  geom_bar(position="fill", stat="identity") + xlab("Sample Size") + ylab("Proportion of Datasets") + ggtitle("") + theme(plot.title = element_text(hjust = 0.5, margin=margin(0,0,-5,0))) + theme(legend.position="none") + facet_wrap(~Dataset, ncol = 2) +  theme(axis.text.y = element_text(size = 14)) +  theme(axis.text.x = element_text(size = 18)) +  theme(legend.text = element_text(size = 21))+ theme(strip.text.x = element_text(size = 20)) + theme(legend.title = element_text(size=21)) + theme(axis.title.x = element_text(size=22),  legend.spacing.x = unit(0.8, 'cm')) + labs(subtitle = "Scenario 1") + theme(plot.subtitle=element_text(hjust=0.5, size= 23, face="bold")) + theme(legend.direction = "horizontal") + theme(axis.title.y = element_text(size=22)) +scale_fill_manual("Result:", labels = c("Flashpoint \n Detected", "Alteration \n Detected" ,"Only Amplification \n Detected", "Only Deletion \n Detected", "No Alteration \n Detected"), values = c("#0D2B76", "#8D73B6", "#00B1A9", "light blue", "white"))+ scale_color_manual("Result:", labels = c("Flashpoint \n Detected", "Alteration \n Detected" ,"Only Amplification \n Detected", "Only Deletion \n Detected", "No Alteration \n Detected"), values = c("black", "black", "black", "black", "black")) 

p_2 <- ggplot(List_2_All, aes(x=SampleSize, y=value, colour = variable, group = variable, fill = variable)) +  geom_bar(position="fill", stat="identity") + xlab("Sample Size") + ylab("Proportion of Datasets") + ggtitle("") + theme(plot.title = element_text(hjust = 0.5, margin=margin(0,0,-5,0))) + theme(legend.position="none") + facet_wrap(~Dataset, ncol = 2) +  theme(axis.text.y = element_text(size = 14)) +  theme(axis.text.x = element_text(size = 18)) +  theme(legend.text = element_text(size = 21))+ theme(strip.text.x = element_text(size = 20)) + theme(legend.title = element_text(size=21)) + theme(axis.title.x = element_text(size=22),  legend.spacing.x = unit(0.8, 'cm')) + labs(subtitle = "Scenario 2") + theme(plot.subtitle=element_text(hjust=0.5, size= 23, face="bold")) + theme(legend.direction = "horizontal") + theme(axis.title.y = element_text(size=22))+ scale_fill_manual("Result:", labels = c("Flashpoint \n Detected", "Alteration \n Detected" ,"Only Amplification \n Detected", "Only Deletion \n Detected", "No Alteration \n Detected"), values = c("#0D2B76", "#8D73B6", "#00B1A9", "light blue", "white")) + scale_color_manual("Result:", labels = c("Flashpoint \n Detected", "Alteration \n Detected" ,"Only Amplification \n Detected", "Only Deletion \n Detected", "No Alteration \n Detected"), values = c("black", "black", "black", "black", "black")) 

p_3 <- ggplot(List_3_All, aes(x=SampleSize, y=value, colour = variable, group = variable, fill = variable)) +  geom_bar(position="fill", stat="identity") + xlab("Sample Size") + ylab("Proportion of Datasets") + ggtitle("") + theme(plot.title = element_text(hjust = 0.5, margin=margin(0,0,-5,0))) + theme(legend.position="none") + facet_wrap(~Dataset, ncol = 2) +  theme(axis.text.y = element_text(size = 14)) +  theme(axis.text.x = element_text(size = 18)) +  theme(legend.text = element_text(size = 21))+ theme(strip.text.x = element_text(size = 20)) + theme(legend.title = element_text(size=21)) + theme(axis.title.x = element_text(size=22),  legend.spacing.x = unit(0.8, 'cm')) + labs(subtitle = "Scenario 3") + theme(plot.subtitle=element_text(hjust=0.5, size= 23, face="bold")) + theme(legend.direction = "horizontal") + theme(axis.title.y = element_text(size=22))+ scale_fill_manual("Result:", labels = c("Flashpoint \n Detected", "Alteration \n Detected" ,"Only Amplification \n Detected", "Only Deletion \n Detected", "No Alteration \n Detected"), values = c("#0D2B76", "#8D73B6", "#00B1A9", "light blue", "white")) + scale_color_manual("Result:", labels = c("Flashpoint \n Detected", "Alteration \n Detected" ,"Only Amplification \n Detected", "Only Deletion \n Detected", "No Alteration \n Detected"), values = c("black", "black", "black", "black", "black")) 

plot <- arrange <- ggarrange(p_1, p_2, p_3, nrow=3, common.legend = TRUE, legend = "top")

anno <- annotate_figure(plot, top = text_grob("Proportion of Datasets where CNA Patterns were Detected", 
               color = "black", face = "bold", size = 28))

ggsave("ICBG_Barplot.png", anno, height = 19, width = 16)
```

```{r Table}
library(kableExtra)

text_tbl <- data.frame(
  Scenarios = c("Scenario 1", "Scenario 2", "Scenario 3"),
  Description = c("Simulated data where 90% of patients had no CNAs, and therefore no breakpoint, 0% of patients had an amplification only, 0% of patients had a deletion only and 10% had a flashpoint pattern i.e. amplification prior to the breakpoint and deletion post breakpoint. In this data, patients either have a flashpoint or not.", "Simulated data where 80% of patients had no CNAs, and therefore no breakpoint, 10% of patients had an amplification prior to the breakpoint and no CNA post breakpoint, 10% of patients had no CNA prior to the breakpoint and a deletion post breakpoint and 0% had a flashpoint pattern i.e. amplification followed directly by a deletion. In this data, patients with CNAs have amplifications prior to the breakpoint or deletions post breakpoint only, no flashpoints are present.", "Simulated data where 75% of patients had no CNAs, and therefore no breakpoint, 20% of patients had an amplification prior to the breakpoint and no CNA post breakpoint, 5% of patients had no CNA prior to the breakpoint and a deletion post breakpoint and 0% had a flashpoint pattern i.e. amplification followed directly by a deletion. In this data, patients with CNAs have amplifications prior to the breakpoint or deletions post breakpoint only, no flashpoints are present. ")
)

# Simulated data where 90% of patients had no CNAs, and therefore no breakpoint, 0% of patients had an amplification only, 0% of patients had a deletion only and 10% had a flashpoint pattern i.e. amplification followed directly by a deletion. In this data, patients either have a flashpoint or not."

# "Simulated data where 80% of patients had no CNAs, and therefore no breakpoint, 10% of patients had an amplification prior to the breakpoint and no CNA post breakpoint, 10% of patients had no CNA prior to the breakpoint and a deletion post breakpoint and 0% had a flashpoint pattern i.e. amplification followed directly by a deletion. In this data, patients with CNAs have amplifications prior to or deletions post breakpoint only, no flashpoints are present."


# "Simulated data where 75% of patients had no CNAs, and therefore no breakpoint, 20% of patients had an amplification only, 5% of patients had a deletion only and 0% had a flashpoint pattern i.e. amplification followed directly by a deletion. In this data, patients with CNAs have amplifications or deletions only, no flashpoints are present."

mycol <- rgb(141 ,115, 182, max = 255, alpha = 140, names = "#1f2c7b")
mycol1 <- rgb(red = 0.73, green = 0.31, blue = 0.58)


library("kableExtra")

tab <- kbl(text_tbl) %>%
  kable_classic(full_width = F) %>%
  column_spec(1, bold = T, border_right = T, color = "black", background = mycol) %>%
  column_spec(2, width = "68em", background = mycol, color = "black") %>% row_spec(0, bold = T, color = "black", background =  mycol, font_size = 23) %>%  kable_styling(bootstrap_options = "striped", font_size = 21) %>%  row_spec(c(1, 2), extra_css = "border-bottom: 1px solid;")

tab

library(gt)
library(tidyverse)
library(glue)

# Define the start and end dates for the data range
l <- text_tbl %>%
  gt() %>% tab_options(table.background.color = mycol, table.font.color.light = "#000000", column_labels.font.size = 22, table.font.size = 18) 

gtsave(l, "ppp.png")
```

```{r Figures SLR 1, fig.height=7, fig.width=12}
results_TS <- results_TS %>% mutate(x = factor(x, levels = c(paste("Dataset", 1:20, sep=" ")))) %>% mutate("Test" = "TS") %>%  mutate(n = factor(Size, levels = unique(Size)))
results_TE <- results_TE %>% mutate(x = factor(x, levels = c(paste("Dataset", 1:20, sep=" ")))) %>% mutate("Test" = "TE") %>%  mutate(n = factor(Size, levels = unique(c(Size))))

results <- rbind.data.frame(results_TS, results_TE)

ggplot(results, aes(x=x, y=y, ymin=ylo, ymax=yhi, color = Test)) +
  geom_pointrange(position=position_dodge(width=0.6))+
  geom_hline(yintercept = 0, linetype=2, size = 0.8)+
  coord_flip() +  xlab('') + ylab("Intercept Values") + ggtitle("Forest Plot of Confidence Intervals for each β0 (90%/10%)") + theme(plot.title = element_text(hjust = 0.5, face="bold", size = 18))  + scale_color_discrete("Alteration:", labels = c("Amplification", "Deletion")) + theme(legend.position = "top") + facet_wrap(~n, ncol =4) +  theme(axis.text.y = element_text(size = 8.5)) +  theme(axis.text.x = element_text(size = 13)) +  theme(legend.text = element_text(size = 14))+ theme(strip.text.x = element_text(size = 13)) + theme(legend.title = element_text(size=14)) + theme(axis.title.x = element_text(size=14))
```

```{r Figures SLR 1 (Bar), fig.height=7, fig.width=9}
List_2 <- rbindlist(Data_List_Half, idcol = "index")
List_2 <- List_2 %>% mutate(Dataset = "Simple Linear Regression")
List_2_MV <- rbindlist(Data_List_Half_MV, idcol = "index")
List_2_MV <- List_2_MV %>% mutate(Dataset = "Multivariate Linear Regression")

List_2 <- rbind.data.frame(List_2, List_2_MV)
List_2 <- List_2 %>% mutate(Dataset = factor(Dataset, levels = c("Simple Linear Regression", "Multivariate Linear Regression")))
List_2 <- melt(List_2)
List_2 <- List_2 %>% mutate("Proportion" = index) %>% mutate("SampleSize" = gsub(":.*$", "", index)) %>% mutate("Proportion" = gsub(".*\\/", "", index)) %>% mutate(Proportion = paste(Proportion, "%", sep="")) %>% mutate(SampleSize = paste("n = ", SampleSize, sep=""))  %>% mutate(SampleSize = factor(SampleSize, levels =  c("n = 20","n = 30", "n = 50", "n = 80", "n = 100", "n = 200", "n = 500", "n = 1000", "n = 2000"))) %>% mutate(Proportion = factor(Proportion, levels =  c("3%", "5%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "95%")))

ggplot(List_2, aes(x=SampleSize, y=value, colour = variable, group = variable, fill = variable)) +  geom_bar(position="fill", stat="identity") + xlab("Sample Size") + ylab("Proportion of Datasets with Alteration Detected") + ggtitle("Results for each of the Simulated Datasets (90%/10%)") + theme(plot.title = element_text(hjust = 0.5, face="bold", size = 16)) + theme(legend.position="top") + scale_fill_discrete("Result:", labels = c("Flashpoint \n Detected", "Only Amplification \n Detected", "Only Deletion \n Detected", "No Alteration \n Detected")) +  scale_color_discrete("Result:",labels = c("Flashpoint \n Detected", "Only Amplification \n Detected", "Only Deletion \n Detected", "No Alteration \n Detected")) + facet_wrap(~Dataset, ncol = 1) + theme(legend.position = "top")  +  theme(axis.text.y = element_text(size = 8.5)) +  theme(axis.text.x = element_text(size = 12)) +  theme(legend.text = element_text(size = 13))+ theme(strip.text.x = element_text(size = 12)) + theme(legend.title = element_text(size=13)) + theme(axis.title.x = element_text(size=13))
```

```{r Build up SLR 2 context}
Sim_Data_1 <- Sim_Function(Sample_Size = c(20, 30, 50, 80, 100, 200, 500, 1000), Percent_NoAlt = c(75), Percent_Amp_NoDel = c(20), Percent_NoAmp_Del = c(5), Percent_FP = c(0), SimData = 20,  len1 = 2000, len2 = 2000)

Sim_Data_1_Fudge <- Sim_Function(Sample_Size = c(20, 30, 50, 80, 100, 200, 500, 1000), Percent_NoAlt = c(75), Percent_Amp_NoDel = c(20), Percent_NoAmp_Del = c(5), Percent_FP = c(0), SimData = 20, fudge = T, len1 = 2000, len2 = 20)
# Same except for fudge

Sample_Size <- c(20, 30, 50, 80, 100, 200, 500, 1000)

## Set up Empty Dataframe
results_TS <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())
results_TE <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())
results_Multi <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())

## 
sig.val <- 0.05
Data_List_Half <- list()
List <- list()
Data_List_Half_MV <- list()
List_MV <- list()

for(k in 1:length(Sample_Size)){
  Data_Prop <- c()
  Half_Caught <- c()
  Results <- c()
  
  Data_Prop_MV <- c()
  Half_Caught_MV <- c()
  Results_MV <- c()
  
  Sample_Data <- Sim_Data_1[[k]]$`75/20/5/0`
  
  for(i in 1:length(Sample_Data)){
    TS <- lm(Towards.Start ~ 1, data = Sample_Data[[i]])
    TE <- lm(Towards.End ~ 1, data = Sample_Data[[i]])
    
    results_TS <- rbind.data.frame(results_TS, data.frame("x" = paste("Dataset", i, sep = " "), "y" = unname(TS$coefficients), "ylo" = confint(TS, '(Intercept)', level=0.95)[1], "yhi" = confint(TS, '(Intercept)', level=0.95)[2], "sigma" = sigma(TS), "Size" = paste("n =", Sample_Size[k]))) 
    results_TE <- rbind.data.frame(results_TE, data.frame("x" = paste("Dataset", i, sep = " "), "y" = unname(TE$coefficients), "ylo" = confint(TE, '(Intercept)', level=0.95)[1], "yhi" = confint(TE, '(Intercept)', level=0.95)[2], "sigma" = sigma(TE),  "Size" = paste("n =", Sample_Size[k])))
    
    
    if(signif(summary(TS)$coefficients[[4]], digits = 4) < sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) < sig.val){
      Results <- c(Results, paste("Amp = Yes", ", ", "Del = Yes", sep=""))
    } else if(signif(summary(TS)$coefficients[[4]], digits = 4) >= sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) < sig.val){
      Results <- c(Results, paste("Amp = No", ", ", "Del = Yes", sep=""))
    } else if(signif(summary(TS)$coefficients[[4]], digits = 4) < sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) >= sig.val){
      Results <- c(Results, paste("Amp = Yes", ", ", "Del = No", sep=""))
    } else {
      Results <- c(Results, paste("Amp = No", ", ", "Del = No", sep=""))
    }
    
    Both_Test <- lm(cbind(Towards.Start, Towards.End) ~ 1, data = Sample_Data[[i]])
    lh.out <- linearHypothesis(Both_Test, hypothesis.matrix = c("(Intercept) = 0"))
    
    an <- anova(Both_Test)
    
    if(signif(as.numeric(an$`Pr(>F)`)[[1]], digits = 4) < sig.val){
      Results_MV <- c(Results_MV, paste("Amp = Yes", ", ", "Del = Yes", sep=""))
    } else {
      Results_MV <- c(Results_MV, paste("Amp = No", ", ", "Del = No", sep=""))
    }
  }
  
  Data_Prop <- c(Data_Prop, length(which(Results == "Amp = Yes, Del = Yes"))/20)
  Half_Caught <- data.frame("Yes" = length(which(Results == "Amp = Yes, Del = Yes")), "Half_Amp" = length(which(Results %in% c("Amp = Yes, Del = No"))), "Half_Del" = length(which(Results %in% c("Amp = No, Del = Yes"))), "No" = length(which(Results == "Amp = No, Del = No")))
  Data_List_Half[[paste(Sample_Size[k], " 75/20/5/0",  sep=":")]] <- Half_Caught
  Data_Prop <- as.data.frame(Data_Prop)
  names(Data_Prop) <- "PropDis"
  Data_Prop <- Data_Prop %>% mutate(Prop = factor(paste(c(25), "%", sep =""), levels =  c(paste(c(25), "%", sep =""))))
  List[[k]] <- Data_Prop
  
  Data_Prop_MV <- c(Data_Prop_MV, length(which(Results_MV == "Amp = Yes, Del = Yes"))/20)
  Half_Caught_MV <- data.frame("Yes" = length(which(Results_MV == "Amp = Yes, Del = Yes")), "Half_Amp" = length(which(Results_MV %in% c("Amp = Yes, Del = No"))), "Half_Del" = length(which(Results_MV %in% c("Amp = No, Del = Yes"))), "No" = length(which(Results_MV == "Amp = No, Del = No")))
  Data_List_Half_MV[[paste(Sample_Size[k], " 75/20/5/0",  sep=":")]] <- Half_Caught_MV
  Data_Prop_MV <- as.data.frame(Data_Prop_MV)
  names(Data_Prop_MV) <- "PropDis"
  Data_Prop_MV <- Data_Prop_MV %>% mutate(Prop = factor(paste(c(25), "%", sep =""), levels =  c(paste(c(25), "%", sep =""))))
  List_MV[[k]] <- Data_Prop_MV
}

```

```{r Figures SLR 2, fig.height=7, fig.width=12}
results_TS <- results_TS %>% mutate(x = factor(x, levels = c(paste("Dataset", 1:20, sep=" ")))) %>% mutate("Test" = "TS") %>%  mutate(n = factor(Size, levels = unique(Size)))
results_TE <- results_TE %>% mutate(x = factor(x, levels = c(paste("Dataset", 1:20, sep=" ")))) %>% mutate("Test" = "TE") %>%  mutate(n = factor(Size, levels = unique(c(Size))))

results <- rbind.data.frame(results_TS, results_TE)

ggplot(results, aes(x=x, y=y, ymin=ylo, ymax=yhi, color = Test)) +
  geom_pointrange(position=position_dodge(width=0.6))+
  geom_hline(yintercept = 0, linetype=2, size = 0.8)+
  coord_flip() +  xlab('') + ylab("Intercept Values") + ggtitle("Forest Plot of Confidence Intervals for each β0 (75%/20%/5%/0%)") + theme(plot.title = element_text(hjust = 0.5, face="bold", size = 18))  + scale_color_discrete("Alteration:", labels = c("Amplification", "Deletion")) + theme(legend.position = "top") + facet_wrap(~n, ncol =4) +  theme(axis.text.y = element_text(size = 8.5)) +  theme(axis.text.x = element_text(size = 13)) +  theme(legend.text = element_text(size = 14))+ theme(strip.text.x = element_text(size = 13)) + theme(legend.title = element_text(size=14)) + theme(axis.title.x = element_text(size=14))
```

```{r Figures SLR 2 (Bar), fig.height=7, fig.width=9}
List_2 <- rbindlist(Data_List_Half, idcol = "index")
List_2 <- List_2 %>% mutate(Dataset = "Simple Linear Regression")
List_2_MV <- rbindlist(Data_List_Half_MV, idcol = "index")
List_2_MV <- List_2_MV %>% mutate(Dataset = "Multivariate Linear Regression")

List_2 <- rbind.data.frame(List_2, List_2_MV)
List_2 <- List_2 %>% mutate(Dataset = factor(Dataset, levels = c("Simple Linear Regression", "Multivariate Linear Regression")))
List_2 <- melt(List_2)
List_2 <- List_2 %>% mutate("Proportion" = index) %>% mutate("SampleSize" = gsub(":.*$", "", index)) %>% mutate("Proportion" = gsub(".*\\/", "", index)) %>% mutate(Proportion = paste(Proportion, "%", sep="")) %>% mutate(SampleSize = paste("n = ", SampleSize, sep=""))  %>% mutate(SampleSize = factor(SampleSize, levels =  c("n = 20","n = 30", "n = 50", "n = 80", "n = 100", "n = 200", "n = 500", "n = 1000", "n = 2000"))) %>% mutate(Proportion = factor(Proportion, levels =  c("3%", "5%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "95%")))

ggplot(List_2, aes(x=SampleSize, y=value, colour = variable, group = variable, fill = variable)) +  geom_bar(position="fill", stat="identity") + xlab("Sample Size") + ylab("Proportion of Datasets with Alteration Detected") + ggtitle("Results for each of the Simulated Datasets (75%/20%/5%/0%)") + theme(plot.title = element_text(hjust = 0.5, face="bold", size = 16)) + theme(legend.position="top") + scale_fill_discrete("Result:", labels = c("Flashpoint \n Detected", "Only Amplification \n Detected", "Only Deletion \n Detected", "No Alteration \n Detected")) +  scale_color_discrete("Result:",labels = c("Flashpoint \n Detected", "Only Amplification \n Detected", "Only Deletion \n Detected", "No Alteration \n Detected")) + facet_wrap(~Dataset, ncol = 1) + theme(legend.position = "top")  +  theme(axis.text.y = element_text(size = 8.5)) +  theme(axis.text.x = element_text(size = 12)) +  theme(legend.text = element_text(size = 13))+ theme(strip.text.x = element_text(size = 12)) + theme(legend.title = element_text(size=13)) + theme(axis.title.x = element_text(size=13))
```

```{r Build up SLR 2 context}
## Create Data 
Sim_Data_1 <- Sim_Function(Sample_Size = c(20, 30, 50, 80, 100, 200, 500, 1000), Percent_NoAlt = c(75), Percent_Amp_NoDel = c(20), Percent_NoAmp_Del = c(5), Percent_FP = c(0), SimData = 20,  len1 = 2000, len2 = 2000)

Sim_Data_1_Fudge <- Sim_Function(Sample_Size = c(20, 30, 50, 80, 100, 200, 500, 1000), Percent_NoAlt = c(75), Percent_Amp_NoDel = c(20), Percent_NoAmp_Del = c(5), Percent_FP = c(0), SimData = 20, fudge = T, len1 = 2000, len2 = 20)
# Same except for fudge

Sample_Size <- c(20, 30, 50, 80, 100, 200, 500, 1000)

## Set up Empty Dataframe
results_TS <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())
results_TE <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())
results_Multi <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())

## 
sig.val <- 0.05
Data_List_Half <- list()
List <- list()
for(k in 1:length(Sample_Size)){
  Data_Prop <- c()
  Half_Caught <- c()
  Results <- c()
  Sample_Data <- Sim_Data_1[[k]]$`75/20/5/0`
  for(i in 1:length(Sample_Data)){
    TS <- lm(Towards.Start ~ 1, data = Sample_Data[[i]])
    TE <- lm(Towards.End ~ 1, data = Sample_Data[[i]])
    
    results_TS <- rbind.data.frame(results_TS, data.frame("x" = paste("Dataset", i, sep = " "), "y" = unname(TS$coefficients), "ylo" = confint(TS, '(Intercept)', level=0.95)[1], "yhi" = confint(TS, '(Intercept)', level=0.95)[2], "sigma" = sigma(TS), "Size" = paste("n =", Sample_Size[k]))) 
    results_TE <- rbind.data.frame(results_TE, data.frame("x" = paste("Dataset", i, sep = " "), "y" = unname(TE$coefficients), "ylo" = confint(TE, '(Intercept)', level=0.95)[1], "yhi" = confint(TE, '(Intercept)', level=0.95)[2], "sigma" = sigma(TE),  "Size" = paste("n =", Sample_Size[k])))
    
    
    if(signif(summary(TS)$coefficients[[4]], digits = 4) < sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) < sig.val){
      Results <- c(Results, paste("Amp = Yes", ", ", "Del = Yes", sep=""))
    } else if(signif(summary(TS)$coefficients[[4]], digits = 4) >= sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) < sig.val){
      Results <- c(Results, paste("Amp = No", ", ", "Del = Yes", sep=""))
    } else if(signif(summary(TS)$coefficients[[4]], digits = 4) < sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) >= sig.val){
      Results <- c(Results, paste("Amp = Yes", ", ", "Del = No", sep=""))
    } else {
      Results <- c(Results, paste("Amp = No", ", ", "Del = No", sep=""))
    }
  }
  print(k)
  print(length(which(Results == "Amp = Yes, Del = Yes"))/20)
  Data_Prop <- c(Data_Prop, length(which(Results == "Amp = Yes, Del = Yes"))/20)
  Half_Caught <- data.frame("Yes" = length(which(Results == "Amp = Yes, Del = Yes")), "Half_Amp" = length(which(Results %in% c("Amp = Yes, Del = No"))), "Half_Del" = length(which(Results %in% c("Amp = No, Del = Yes"))), "No" = length(which(Results == "Amp = No, Del = No")))
  Data_List_Half[[paste(Sample_Size[k], " 75/20/5/0",  sep=":")]] <- Half_Caught
  Data_Prop <- as.data.frame(Data_Prop)
  names(Data_Prop) <- "PropDis"
  Data_Prop <- Data_Prop %>% mutate(Prop = factor(paste(c(25), "%", sep =""), levels =  c(paste(c(25), "%", sep =""))))
  List[[k]] <- Data_Prop
}

```

```{r Figures SLR 2, fig.height=7, fig.width=12}
results_TS <- results_TS %>% mutate(x = factor(x, levels = c(paste("Dataset", 1:20, sep=" ")))) %>% mutate("Test" = "TS") %>%  mutate(n = factor(Size, levels = unique(Size)))
results_TE <- results_TE %>% mutate(x = factor(x, levels = c(paste("Dataset", 1:20, sep=" ")))) %>% mutate("Test" = "TE") %>%  mutate(n = factor(Size, levels = unique(c(Size))))

results <- rbind.data.frame(results_TS, results_TE)

ggplot(results, aes(x=x, y=y, ymin=ylo, ymax=yhi, color = Test)) +
  geom_pointrange(position=position_dodge(width=0.6))+
  geom_hline(yintercept = 0, linetype=2, size = 0.8)+
  coord_flip() +  xlab('') + ylab("Intercept Values") + ggtitle("Forest Plot of Confidence Intervals for each β0") + theme(plot.title = element_text(hjust = 0.5, face="bold", size = 18))  + scale_color_discrete("Alteration:", labels = c("Amplification", "Deletion")) + theme(legend.position = "top") + facet_wrap(~n, ncol =4) +  theme(axis.text.y = element_text(size = 8.5)) +  theme(axis.text.x = element_text(size = 13)) +  theme(legend.text = element_text(size = 14))+ theme(strip.text.x = element_text(size = 13)) + theme(legend.title = element_text(size=14)) + theme(axis.title.x = element_text(size=14))
```

```{r Figures SLR 2 (Bar), fig.height=5, fig.width=6}
List_2 <- rbindlist(Data_List_Half, idcol = "index")

List_2 <- melt(List_2)
List_2 <- List_2 %>% mutate("Proportion" = index) %>% mutate("SampleSize" = gsub(":.*$", "", index)) %>% mutate("Proportion" = gsub(".*\\/", "", index)) %>% mutate(Proportion = paste(Proportion, "%", sep="")) %>% mutate(SampleSize = paste("n = ", SampleSize, sep=""))  %>% mutate(SampleSize = factor(SampleSize, levels =  c("n = 20","n = 30", "n = 50", "n = 80", "n = 100", "n = 200", "n = 500", "n = 1000", "n = 2000"))) %>% mutate(Proportion = factor(Proportion, levels =  c("3%", "5%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "95%")))

ggplot(List_2, aes(x=SampleSize, y=value, colour = variable, group = variable, fill = variable)) +  geom_bar(position="fill", stat="identity") + xlab("Sample Size") + ylab("Proportion of Datasets with Alteration Detected") + ggtitle("Simple Linear Regression Results for each of the Simulated Datasets") + theme(plot.title = element_text(hjust = 0.5, face="bold")) + theme(legend.position="top") + scale_fill_discrete("Result", labels = c("Flashpoint \n Detected", "Only Amplification \n Detected", "Only Deletion \n Detected", "No Alteration \n Detected")) +  scale_color_discrete("Result",labels = c("Flashpoint \n Detected", "Only Amplification \n Detected", "Only Deletion \n Detected", "No Alteration \n Detected"))
```

```{r Build up MLR 1 context}
## Create Data 
Sim_Data_1 <- Sim_Function(Sample_Size = c(20, 30, 50, 80, 100, 200, 500, 1000), Percent_NoAlt = c(90), Percent_Amp_NoDel = c(0), Percent_NoAmp_Del = c(0), Percent_FP = c(10), SimData = 20,  len1 = 2000, len2 = 2000)

Sim_Data_1_Fudge <- Sim_Function(Sample_Size = c(20, 30, 50, 80, 100, 200, 500, 1000), Percent_NoAlt = c(90), Percent_Amp_NoDel = c(0), Percent_NoAmp_Del = c(0), Percent_FP = c(10), SimData = 20, fudge = T, len1 = 2000, len2 = 20)

Sample_Size <- c(20, 30, 50, 80, 100, 200, 500, 1000)

## Set up Empty Dataframe
results_TS <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())
results_TE <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())
results_Multi <-  data.frame("x" = character(), "y" = numeric(), "ylo" = numeric(), "yhi" = numeric(), "sigma" = numeric())

## 
sig.val <- 0.05
Data_List_Half <- list()
List <- list()
for(k in 1:length(Sample_Size)){
  Data_Prop <- c()
  Half_Caught <- c()
  Results <- c()
  Sample_Data <- Sim_Data_1[[k]]$`90/0/0/10`
  for(i in 1:length(Sample_Data)){
    Both_Test <- lm(cbind(Towards.Start, Towards.End) ~ 1, data = Sample_Data[[i]])
    lh.out <- linearHypothesis(Both_Test, hypothesis.matrix = c("(Intercept) = 0"))
    
    an <- anova(Both_Test)
    print(i)
    print(an)
    
    if(signif(as.numeric(an$`Pr(>F)`)[[1]], digits = 4) < sig.val){
       Results <- c(Results, paste("Amp = Yes", ", ", "Del = Yes", sep=""))
       } else {
      Results <- c(Results, paste("Amp = No", ", ", "Del = No", sep=""))
    }
  }
  print(k)
  print(length(which(Results == "Amp = Yes, Del = Yes"))/20)
  Data_Prop <- c(Data_Prop, length(which(Results == "Amp = Yes, Del = Yes"))/20)
  Half_Caught <- data.frame("Yes" = length(which(Results == "Amp = Yes, Del = Yes")), "Half_Amp" = length(which(Results %in% c("Amp = Yes, Del = No"))), "Half_Del" = length(which(Results %in% c("Amp = No, Del = Yes"))), "No" = length(which(Results == "Amp = No, Del = No")))
  Data_List_Half[[paste(Sample_Size[k], " 90/0/0/10",  sep=":")]] <- Half_Caught
  Data_Prop <- as.data.frame(Data_Prop)
  names(Data_Prop) <- "PropDis"
  Data_Prop <- Data_Prop %>% mutate(Prop = factor(paste(c(25), "%", sep =""), levels =  c(paste(c(25), "%", sep =""))))
  List[[k]] <- Data_Prop
}

```

```{r Figure MLR 1}
List_2 <- rbindlist(Data_List_Half, idcol = "index")

List_2 <- melt(List_2)
List_2 <- List_2 %>% mutate("Proportion" = index) %>% mutate("SampleSize" = gsub(":.*$", "", index)) %>% mutate("Proportion" = gsub(".*\\/", "", index)) %>% mutate(Proportion = paste(Proportion, "%", sep="")) %>% mutate(SampleSize = paste("n = ", SampleSize, sep=""))  %>% mutate(SampleSize = factor(SampleSize, levels =  c("n = 20","n = 30", "n = 50", "n = 80", "n = 100", "n = 200", "n = 500", "n = 1000", "n = 2000"))) %>% mutate(Proportion = factor(Proportion, levels =  c("3%", "5%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "95%")))

ggplot(List_2, aes(x=SampleSize, y=value, colour = variable, group = variable, fill = variable)) +  geom_bar(position="fill", stat="identity") + xlab("Sample Size") + ylab("Proportion of Datasets with Alteration Detected") + ggtitle("Simple Linear Regression Results for each of the Simulated Datasets") + theme(plot.title = element_text(hjust = 0.5, face="bold")) + theme(legend.position="top") + scale_fill_discrete("Result", labels = c("Flashpoint \n Detected", "Only Amplification \n Detected", "Only Deletion \n Detected", "No Alteration \n Detected")) +  scale_color_discrete("Result",labels = c("Flashpoint \n Detected", "Only Amplification \n Detected", "Only Deletion \n Detected", "No Alteration \n Detected"))
```


summary(Both_Test)

Results

# MLM CI the same as SLR
```

```{r}

linearHypothesis.mlm <- function(model, hypothesis.matrix, rhs=NULL, SSPE, V,
		test, idata, icontrasts=c("contr.sum", "contr.poly"), idesign, iterms,
		check.imatrix=TRUE, P=NULL, title="", singular.ok=FALSE, verbose=FALSE, ...){
	if (missing(test)) test <- c("Pillai", "Wilks", "Hotelling-Lawley", "Roy")
	test <- match.arg(test, c("Pillai", "Wilks", "Hotelling-Lawley", "Roy"),
			several.ok=TRUE)
	df.residual <- df.residual(model)
	wts <- if (!is.null(model$weights)) model$weights else rep(1,nrow(model.matrix(model)))
	# V = (X'WX)^{-1}
	if (missing (V)) V <- solve(wcrossprod(model.matrix(model), w=wts))
	B <- coef(model)
	if (is.character(hypothesis.matrix)) {
		L <- makeHypothesis(rownames(B), hypothesis.matrix, rhs)
		if (is.null(dim(L))) L <- t(L)
		L <- L[, -NCOL(L), drop = FALSE]
		rownames(L) <- hypothesis.matrix
	}
	else {
		L <- if (is.null(dim(hypothesis.matrix))) t(hypothesis.matrix)
				else hypothesis.matrix
	}
	# SSPE = E'WE
	if (missing(SSPE)) SSPE <- wcrossprod(residuals(model),w=wts)
	if (missing(idata)) idata <- NULL
	if (missing(idesign)) idesign <- NULL
	if (!is.null(idata)){
		for (i in 1:length(idata)){
			if (is.null(attr(idata[,i], "contrasts"))){
				contrasts(idata[,i]) <- if (is.ordered(idata[,i])) icontrasts[2]
						else icontrasts[1]
			}
		}
		if (is.null(idesign)) stop("idesign (intra-subject design) missing.")
		X.design <- model.matrix(idesign, data=idata)
		if (check.imatrix) check.imatrix(X.design)
		intercept <- has.intercept(X.design)
		term.names <- term.names(idesign)
		if (intercept) term.names <- c("(Intercept)", term.names)
		which.terms <- match(iterms, term.names)
		if (any(nas <- is.na(which.terms))){
			if (sum(nas) == 1)
				stop('The term "', iterms[nas],'" is not in the intrasubject design.')
			else stop("The following terms are not in the intrasubject design: ",
						paste(iterms[nas], collapse=", "), ".")
		}
		select <- apply(outer(which.terms, attr(X.design, "assign") + intercept, "=="),
				2, any)
		P <- X.design[, select, drop=FALSE]
	}
	if (!is.null(P)){
		rownames(P) <- colnames(B)
		SSPE <- t(P) %*% SSPE %*% P
		B <- B %*% P
	}
	rank <- sum(eigen(SSPE, only.values=TRUE)$values >= sqrt(.Machine$double.eps))
	if (!singular.ok && rank < ncol(SSPE))
		stop("The error SSP matrix is apparently of deficient rank = ",
				rank, " < ", ncol(SSPE))
	r <- ncol(B)
	if (is.null(rhs)) rhs <- matrix(0, nrow(L), r)
	rownames(rhs) <- rownames(L)
	colnames(rhs) <- colnames(B)
	q <- NROW(L)
	if (verbose){
		cat("\nHypothesis matrix:\n")
		print(L)
		cat("\nRight-hand-side matrix:\n")
		print(rhs)
		cat("\nEstimated linear function (hypothesis.matrix %*% coef - rhs):\n")
		print(drop(L %*% B - rhs))
		cat("\n")
	}
	SSPH <- t(L %*% B - rhs) %*% solve(L %*% V %*% t(L)) %*% (L %*% B - rhs)
	rval <- list(SSPH=SSPH, SSPE=SSPE, df=q, r=r, df.residual=df.residual, P=P,
			title=title, test=test, singular=rank < ncol(SSPE))
	class(rval) <- "linearHypothesis.mlm"
	rval
}
Pillai <- function (eig, q, df.res) {
  test <- sum(eig/(1 + eig))
  p <- length(eig)
  s <- min(p, q)
  n <- 0.5 * (df.res - p - 1)
  m <- 0.5 * (abs(p - q) - 1)
  tmp1 <- 2 * m + s + 1
  tmp2 <- 2 * n + s + 1
  c(test, (tmp2/tmp1 * test)/(s - test), s * tmp1, s * tmp2)
}

Wilks <- function (eig, q, df.res) {
  test <- prod(1/(1 + eig))
  p <- length(eig)
  tmp1 <- df.res - 0.5 * (p - q + 1)
  tmp2 <- (p * q - 2)/4
  tmp3 <- p^2 + q^2 - 5
  tmp3 <- if (tmp3 > 0) 
    sqrt(((p * q)^2 - 4)/tmp3)
  else 1
  c(test, ((test^(-1/tmp3) - 1) * (tmp1 * tmp3 - 2 * tmp2))/p/q, 
    p * q, tmp1 * tmp3 - 2 * tmp2)
}

HL <- function (eig, q, df.res) {
  test <- sum(eig)
  p <- length(eig)
  m <- 0.5 * (abs(p - q) - 1)
  n <- 0.5 * (df.res - p - 1)
  s <- min(p, q)
  tmp1 <- 2 * m + s + 1
  tmp2 <- 2 * (s * n + 1)
  c(test, (tmp2 * test)/s/s/tmp1, s * tmp1, tmp2)
}

Roy <- function (eig, q, df.res) {
  p <- length(eig)
  test <- max(eig)
  tmp1 <- max(p, q)
  tmp2 <- df.res - tmp1 + q
  c(test, (tmp2 * test)/tmp1, tmp1, tmp2)
}

print.Anova.mlm <- function(x, ...){
  if ((!is.null(x$singular)) && any(x$singular)) stop("singular error SSP matrix; multivariate tests unavailable\ntry summary(object, multivariate=FALSE)")
  test <- x$test
  repeated <- x$repeated
  ntests <- length(x$terms)
  tests <- matrix(NA, ntests, 4)
  if (!repeated) SSPE.qr <- qr(x$SSPE) 
  for (term in 1:ntests){
    # some of the code here adapted from stats:::summary.manova
    eigs <- Re(eigen(qr.coef(if (repeated) qr(x$SSPE[[term]]) else SSPE.qr,
                             x$SSP[[term]]), symmetric = FALSE)$values)
    tests[term, 1:4] <- switch(test,
                               Pillai = Pillai(eigs, x$df[term], x$error.df),
                               Wilks = Wilks(eigs, x$df[term], x$error.df),
                               "Hotelling-Lawley" = HL(eigs, x$df[term], x$error.df),
                               Roy = Roy(eigs, x$df[term], x$error.df))
  }
  ok <- tests[, 2] >= 0 & tests[, 3] > 0 & tests[, 4] > 0
  ok <- !is.na(ok) & ok
  tests <- cbind(x$df, tests, pf(tests[ok, 2], tests[ok, 3], tests[ok, 4], 
                                 lower.tail = FALSE))
  rownames(tests) <- x$terms
  colnames(tests) <- c("Df", "test stat", "approx F", "num Df", "den Df", "Pr(>F)")
  tests <- structure(as.data.frame(tests), 
                     heading = paste("\nType ", x$type, if (repeated) " Repeated Measures",
                                     " MANOVA Tests: ", test, " test statistic", sep=""), 
                     class = c("anova", "data.frame"))
  print(tests, ...)      
  tests <<- tests
}


```


    results_TS <- rbind.data.frame(results_TS, data.frame("x" = paste("Dataset", i, sep = " "), "y" = unname(TS$coefficients), "ylo" = confint(TS, '(Intercept)', level=0.95)[1], "yhi" = confint(TS, '(Intercept)', level=0.95)[2], "sigma" = sigma(TS), "Size" = paste("n =", Sample_Size[k]))) 
    results_TE <- rbind.data.frame(results_TE, data.frame("x" = paste("Dataset", i, sep = " "), "y" = unname(TE$coefficients), "ylo" = confint(TE, '(Intercept)', level=0.95)[1], "yhi" = confint(TE, '(Intercept)', level=0.95)[2], "sigma" = sigma(TE),  "Size" = paste("n =", Sample_Size[k])))
    
    
    if(signif(summary(TS)$coefficients[[4]], digits = 4) < sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) < sig.val){
      Results <- c(Results, paste("Amp = Yes", ", ", "Del = Yes", sep=""))
    } else if(signif(summary(TS)$coefficients[[4]], digits = 4) >= sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) < sig.val){
      Results <- c(Results, paste("Amp = No", ", ", "Del = Yes", sep=""))
    } else if(signif(summary(TS)$coefficients[[4]], digits = 4) < sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) >= sig.val){
      Results <- c(Results, paste("Amp = Yes", ", ", "Del = No", sep=""))
    } else {
      Results <- c(Results, paste("Amp = No", ", ", "Del = No", sep=""))
    }
  }
  print(k)
  print(length(which(Results == "Amp = Yes, Del = Yes"))/20)
  Data_Prop <- c(Data_Prop, length(which(Results == "Amp = Yes, Del = Yes"))/20)
  Half_Caught <- data.frame("Yes" = length(which(Results == "Amp = Yes, Del = Yes")), "Half_Amp" = length(which(Results %in% c("Amp = Yes, Del = No"))), "Half_Del" = length(which(Results %in% c("Amp = No, Del = Yes"))), "No" = length(which(Results == "Amp = No, Del = No")))
  Data_List_Half[[paste(Sample_Size[k], " 80/0/0/20",  sep=":")]] <- Half_Caught
  Data_Prop <- as.data.frame(Data_Prop)
  names(Data_Prop) <- "PropDis"
  Data_Prop <- Data_Prop %>% mutate(Prop = factor(paste(c(25), "%", sep =""), levels =  c(paste(c(25), "%", sep =""))))
  List[[k]] <- Data_Prop
}
```


Plot_Simulated_Data <- function(Data, sig.val = 0.05, SimData = 20){
  Data_List_Half <<- list()
  List <- list()
  for(i in 1:length(Data)){
    Data_Prop <- c()
    for(j in 1:length(Data[[i]])){
      Results <- c()
      Half_Caught <- c()
      for(k in 1:length(Data[[i]][[j]])){
        
        Data_1 <- Data[[i]][[j]][[k]]
        TS <- lm(Towards.Start ~ 1, data = Data_1)
        TE <- lm(Towards.End ~ 1, data = Data_1)
        
        if(signif(summary(TS)$coefficients[[4]], digits = 4) < sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) < sig.val){
          Results <- c(Results, paste("Amp = Yes", ", ", "Del = Yes", sep=""))
        } else if(signif(summary(TS)$coefficients[[4]], digits = 4) >= sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) < sig.val){
          Results <- c(Results, paste("Amp = No", ", ", "Del = Yes", sep=""))
        } else if(signif(summary(TS)$coefficients[[4]], digits = 4) < sig.val && signif(summary(TE)$coefficients[[4]], digits = 4) >= sig.val){
          Results <- c(Results, paste("Amp = Yes", ", ", "Del = No", sep=""))
        } else {
          Results <- c(Results, paste("Amp = No", ", ", "Del = No", sep=""))
        }
      }
      Data_Prop <- c(Data_Prop, length(which(Results == "Amp = Yes, Del = Yes"))/SimData)
      Half_Caught <- data.frame("Yes" = length(which(Results == "Amp = Yes, Del = Yes")), "Half_Amp" = length(which(Results %in% c("Amp = Yes, Del = No"))), "Half_Del" = length(which(Results %in% c("Amp = No, Del = Yes"))), "No" = length(which(Results == "Amp = No, Del = No")))
      Data_List_Half[[paste(gsub("Sample Size:", "", names(Data))[i], names(Data[[i]])[j],  sep=":")]] <<- Half_Caught
    }
    Data_Prop <- as.data.frame(Data_Prop)
    names(Data_Prop) <- "PropDis"
    Data_Prop <- Data_Prop %>% mutate(Prop = factor(paste(c(5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 95), "%", sep =""), levels =  c(paste(c(5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 95), "%", sep =""))))
    List[[i]] <- Data_Prop
  }
  return(List)
}

### Data 1 
Fig_Data1 <- Plot_Simulated_Data(Sim_Data_1)
List <- rbindlist(Fig_Data1, idcol = "index")

List <- List %>% mutate(index = ifelse(index == 1, "n=20", ifelse(index == 2, "n=30", ifelse(index == 3, "n=50", ifelse(index == 4, "n=80", ifelse(index == 5, "n=100", ifelse(index == 6, "n=200", ifelse(index == 7, "n=500", ifelse(index == 8, "n=1000", ifelse(index == 9, "n=2000", "-")))))))))) %>% mutate(index = factor(index, levels =  c("n=20","n=30", "n=50", "n=80", "n=100", "n=200", "n=500", "n=1000", "n=2000")))

ggplot(List, aes(x=Prop, y=PropDis, group=index, colour = index)) +
  geom_step() +
  geom_point() + xlab("Percentage of Samples that have Flashpoint") + ylab("Proportion of Datasets with Flashpoint Detected") + ggtitle("20 Simulated Datasets for each Sample Size") + theme(plot.title = element_text(hjust = 0.5)) + facet_wrap(~index) + theme(legend.position="none")

List_2 <- rbindlist(Data_List_Half, idcol = "index")

List_2 <- melt(List_2)
List_2 <- List_2 %>% mutate("Proportion" = index) %>% mutate("SampleSize" = gsub(":.*$", "", index)) %>% mutate("Proportion" = gsub(".*\\/", "", index)) %>% mutate(Proportion = paste(Proportion, "%", sep="")) %>% mutate(SampleSize = paste("n=", SampleSize, sep=""))  %>% mutate(SampleSize = factor(SampleSize, levels =  c("n=20","n=30", "n=50", "n=80", "n=100", "n=200", "n=500", "n=1000", "n=2000"))) %>% mutate(Proportion = factor(Proportion, levels =  c("3%", "5%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "95%")))

ggplot(List_2, aes(x=Proportion, y=value, colour = variable, group = variable, fill = variable)) +  geom_bar(position="stack", stat="identity") + xlab("Percentage of Samples that have Flashpoint") + ylab("Proportion of Datasets with Flashpoint Detected") + ggtitle("T-test Results for each of the Datasets") + theme(plot.title = element_text(hjust = 0.5)) + facet_wrap(~SampleSize) + theme(legend.position="top") + scale_fill_discrete("Result", labels = c("Flashpoint Detected", "Only Amp Detected", "Only Del Detected", "Nothing Detected")) +  scale_color_discrete("Result", labels = c("Flashpoint Detected", "Only Amp Detected", "Only Del Detected", "Nothing Detected"))
```


```{r Simularion Function}

Sim_Function <- function(Sample_Size = c(20, 50), Percent_NoAlt = c(80,0), Percent_Amp_NoDel = c(0, 0), Percent_NoAmp_Del = c(0, 0), Percent_FP = c(20, 100), SimData = 20, fudge = F){
  Data_List_1 <- list()
  Data_List <<- list()
  Data_List_Final <<- list()
  for(k in 1:length(Sample_Size)){
    for(j in 1:length(Percent_NoAlt)){
      for(i in 1:SimData){
        if(Percent_NoAlt[j] + Percent_Amp_NoDel[j] + Percent_NoAmp_Del[j] + Percent_FP[j] != 100) stop("Error: Percentages must add up to 100")
        
        times <- c(Percent_NoAlt[j], Percent_Amp_NoDel[j], Percent_NoAmp_Del[j], Percent_FP[j])
        times <- (Sample_Size[k]*c(Percent_NoAlt[j], Percent_Amp_NoDel[j], Percent_NoAmp_Del[j], Percent_FP[j]))/100
        round_up <- c(sample(which(!is_wholenumber(times)), length(which(!is_wholenumber(times)))/2))
        round_down <- which(!is_wholenumber(times))[which(!is_wholenumber(times)) %!in% round_up]
        
        times[round_up] <- ceiling(times[round_up])
        times[round_down] <- floor(times[round_down])
        
        # print seed
        if(fudge == T){
          seed <- 1234+i+j+k
          set.seed(seed)
          print(seed)
          Data_NoAlt <- data.frame("Towards.Start" = round(runif(times[1], 0, 1)), "Towards.End" = round(runif(times[1], 0, 1)))
          seed <- 12+i+j+k
          set.seed(seed)
          print(seed)
          Data_Amp_NoDel <- data.frame("Towards.Start" = round(runif(times[2], 1, 2000)), "Towards.End" = round(runif(times[2], 0, 1)))
          seed <- 998+i+j+k
          set.seed(seed)
          print(seed)
          Data_NoAmp_Del <- data.frame("Towards.Start" = round(runif(times[3], 0, 1)), "Towards.End" = round(runif(times[3], 1, 2000)))
          seed <- 990+i+j+k
          set.seed(seed)
          print(seed)
          Data_FP <- data.frame("Towards.Start" = round(runif(times[4], 1, 2000)), "Towards.End" = round(runif(times[4], 1, 2000)))
        } else { 
          seed <- 1234+i+j+k
          set.seed(seed)
          print(seed)
          Data_NoAlt <- data.frame("Towards.Start" = round(runif(times[1], 0, 0)), "Towards.End" = round(runif(times[1], 0, 0)))
          
          seed <- 12+i+j+k
          set.seed(seed)
          print(seed)
          Data_Amp_NoDel <- data.frame("Towards.Start" = round(runif(times[2], 1, 2000)), "Towards.End" = round(runif(times[2], 0, 0)))
          seed <- 998+i+j+k
          set.seed(seed)
          print(seed)
          Data_NoAmp_Del <- data.frame("Towards.Start" = round(runif(times[3], 0, 0)), "Towards.End" = round(runif(times[3], 1, 2000)))
          
          seed <- 990+i+j+k
          set.seed(seed)
          print(seed)
          Data_FP <- data.frame("Towards.Start" = round(runif(times[4], 1, 2000)), "Towards.End" = round(runif(times[4], 1, 2000)))
        }
        
        Data <- rbind.data.frame(Data_NoAlt, Data_Amp_NoDel, Data_NoAmp_Del, Data_FP) %>% mutate(Sample = paste("Sample", 1:Sample_Size[k], sep=" ")) %>% select(Sample, everything())
        Data_List_1[[paste("S", i, sep="")]] <- Data
      }
      Data_List_1 <<- Data_List_1
      Data_List[[paste(Percent_NoAlt[j], "/", Percent_Amp_NoDel[j], "/", Percent_NoAmp_Del[j], "/", Percent_FP[j], sep="")]] <<- Data_List_1
    }
    Data_List_Final[[paste("Sample Size:", Sample_Size[k], sep="")]] <<- Data_List
  }
  return(Data_List_Final)
}

## Test 
Sim_Data_1 <- Sim_Function(Sample_Size = c(20), Percent_NoAlt = c(90), Percent_Amp_NoDel = c(5), Percent_NoAmp_Del = c(0), Percent_FP = c(5), SimData = 10, fudge = F)
print("NEXT")
Sim_Data_1_F <- Sim_Function(Sample_Size = c(20), Percent_NoAlt = c(90), Percent_Amp_NoDel = c(5), Percent_NoAmp_Del = c(0), Percent_FP = c(5), SimData = 10, fudge = T)

Sim_Data_1$`Sample Size:20`$`90/5/0/5`$S3
Sim_Data_1_F$`Sample Size:20`$`90/5/0/5`$S3
```



```{r}

for(k in 1:length(c(1,2))){
  for(j in 1:length(c(1,2))){
    for(i in 1:10){
      
      print(1234+i+j+k)
      
    }
  }
}
```