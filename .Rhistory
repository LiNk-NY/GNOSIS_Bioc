#            validate(need(ncol(dataInputClinicalP()) > 2, "Inputted file only has one column, please select file delimiters and options carefully."))
#            validate(need("PATIENT_ID" %in% colnames(dataInputClinicalP()), "Inputted file does not have PATIENT_ID information - Are you using the right file?"))
#            metaExpr({..(dataInputClinicalP())} )}
#        else if(is.null(input$Input_Patient_File) & !is.null(input$Input_Sample_File) & is.null(input$cBioData_rows_selected)){
#            validate(need(ncol(dataInputClinicalS()) > 2, "Inputted file only has one column, please select file delimiters and options carefully."))
#            validate(need("PATIENT_ID" %in% colnames(dataInputClinicalS()), "Inputted file does not have PATIENT_ID information - Are you using the right file?"))
#            metaExpr({..(dataInputClinicalS())})
#        } else if(is.null(input$Input_Sample_File) & is.null(input$Input_Patient_File) & is.null(input$cBioData_rows_selected)){
#            validate(need(!is.null(input$cBioData_rows_selected) |  !is.null(input$Input_Sample_File) | !is.null(input$Input_Patient_File), "Please select cBioPortal dataset or upload your own data."))
#        } else if(!is.null(input$Input_Sample_File) & !is.null(input$Input_Patient_File) & is.null(input$cBioData_rows_selected)){
#            validate(need(ncol(dataInputClinicalP()) > 2, "Inputted file only has one column, please select file delimiters and options carefully."))
#            validate(need("PATIENT_ID" %in% colnames(dataInputClinicalP()), "Inputted file does not have PATIENT_ID information - Are you using the right file?"))
#            validate(need(ncol(dataInputClinicalS()) > 2, "Inputted file only has one column, please select file delimiters and options carefully."))
#            validate(need("PATIENT_ID" %in% colnames(dataInputClinicalS()), "Inputted file does not have PATIENT_ID information - Are you using the right file?"))
#            metaExpr({merge(..(dataInputClinicalP()), ..(dataInputClinicalS()), by.x = "PATIENT_ID", by.y="PATIENT_ID") })
#        } else if(is.null(input$Input_Sample_File) & is.null(input$Input_Patient_File) & !is.null(input$cBioData_rows_selected)){
#            validate(need(!is.null(input$cBioData_rows_selected), "Please select cBioPortal dataset."))
#            metaExpr({dat <- as.data.frame(..(data_cBioPortal())@colData)
#            rownames(dat) = NULL
#            dat})
#        } else {
#            validate(need(is.null(input$cBioData_rows_selected) |  c(is.null(input$Input_Sample_File) & is.null(input$Input_Patient_File)), "Please only select cBioPortal dataset OR upload your own data."))
#        }
#    })
#     loading_API <- function() {
#        req(!is.null(input$cBioData_rows_selected) & is.null(input$Input_Sample_File) & is.null(input$Input_Patient_File))
#       try(message(data_cBioPortal(), silent = T))
#      message("DONE!")
#     Sys.sleep(5)
#       message("Displaying Data")
#}
#      observe({
#          withCallingHandlers({
#              shinyjs::html("text", "")
#              loading_API()
#          },
#          message = function(m) {
#              print(m$message)
#              if(m$message != "Displaying Data\n"){
#                  hide("ClinicalAll")
#                  hide("CNA")
#                  hide("MAF")
#                  show("text")
#                  show("text1")
#                  show("text2")
#                  shinyjs::html(id = "text", html = paste(m$message, "<br>", sep = " "), add = TRUE)
#                  shinyjs::html(id = "text1", html = paste(m$message, "<br>", sep = " "), add = TRUE)
#                  shinyjs::html(id = "text2", html = paste(m$message, "<br>", sep = " "), add = TRUE)
#              } else {
#                  hide("text")
#                  hide("text1")
#                  hide("text2")
#                  show("ClinicalAll")
#                  show("CNA")
#                  show("MAF")
#              }
#          }
#          )
#      })
Tab1_Input_Files_Preview_Server("tab1_input_preview_1", clinical_data(), length_px = "650px", select_dt = "multiple")
# 4) Input CNA File from cBioPortal: can specify header, sep, quote and Tab3_Segment_CNA_Yes_or_No of lines to skip (default = tab, double quote, skip 0)
# CNA
#      cna_files <- metaReactive2({ metaExpr({names(..(data_cBioPortal()))[grepl("cna", names(..(data_cBioPortal())))]}) })
#     observe({vchoices <- c(cna_files(), "None Selected")
#    updateSelectizeInput(session, "Tab2_CNA_Data", choices = vchoices, selected = "None Selected", server = TRUE)})
#    dataInputCNA <- metaReactive2({req(input$Input_CNA_File)
#        metaExpr({read.delim(..(input$Input_CNA_File$datapath), header = ..(input$Tab1_CNA_Header_Yes_or_No), sep = ..(input$Tab1_CNA_Separator), quote = ..(input$Tab1_CNA_Quote), check.names = F, na.strings=c(""," ","NA"), skip=..(input$Tab1_CNA_Skip_Lines))})})
#
#    CNA_Validated <- metaReactive2({
#        if(is.null(input$Input_CNA_File) & is.null(input$cBioData_rows_selected)){
#            validate(need(!is.null(input$Input_CNA_File) | !is.null(input$cBioData_rows_selected), "Please select cBioPortal dataset or upload your own CNA data."))
#        } else if(!is.null(input$Input_CNA_File) & is.null(input$cBioData_rows_selected)) {
#            validate(need(ncol(dataInputCNA()) > 1, "Inputted file only has one column, please select file delimiters and options carefully."))
#            validate(need("Hugo_Symbol" %in% colnames(dataInputCNA()), "Inputted file does not have Gene information (Hugo_Symbol) - Are you using the right file?"))
#            metaExpr({..(dataInputCNA())})
#        } else if(is.null(input$Input_CNA_File) & !is.null(input$cBioData_rows_selected)){
#            if(length(cna_files()) == 1){
#                if(cna_files() == "cna_hg19.seg"){
#                    validate(need(cna_files() != "cna_hg19.seg", "Warning: CNA file is not compatible, please upload a different CNA file."))
#                } else {
#                    validate(need("Hugo_Symbol" %in% colnames(assays(data_cBioPortal())[[cna_files()]]), "Selected file does not have Gene information (Hugo_Symbol) - Are you using the right file?"))
#                    metaExpr({ assays(..(data_cBioPortal()))[[..(cna_files())]] })
#                }
#            }  else if(length(cna_files()) == 0) {
#                validate(need(length(cna_files()) != 0, "Warning: Selected study has no corresponding CNA data"))
#            } else {
#                validate(need(input$Tab2_CNA_Data != "None Selected", "Study has multiple CNA files, please select one using sidebar"))
#                if(input$Tab2_CNA_Data == "cna_hg19.seg"){
#                    validate(need(input$Tab2_CNA_Data != "cna_hg19.seg", "Warning: CNA file is not compatible, please upload a different CNA file."))
#                } else {
#                    metaExpr({
#                        dat <- as.data.frame(assays(..(data_cBioPortal()))[[..(input$Tab2_CNA_Data)]]) %>% mutate(Hugo_Symbol = rownames(.)) %>% select(Hugo_Symbol, everything())
#                        rownames(dat) <- NULL
#                        validate(need("Hugo_Symbol" %in% colnames(dat), "Selected file does not have Gene information (Hugo_Symbol) - Are you using the right file?"))
#                        dat })
#                }
#
#            }
#        } else {
#            validate(need(is.null(input$cBioData_rows_selected) |  is.null(input$Input_CNA_File), "Please only select cBioPortal dataset OR upload your own data."))
#        }
#    })
Tab1_Input_Files_Preview_Server("tab1_input_preview_2", CNA_data(), length_px = "650px", select_dt = "multiple")
#     Tot_CNA_Col <- metaReactive2({ metaExpr({ncol(..(CNA_data())) }) })
#    Tot_CNA_Row <-  metaReactive2({ metaExpr({nrow(..(CNA_data())) }) })
output$TotalCCNA <- metaRender(renderPrint, {Count_Col(..(CNA_data()))})
output$TotalRCNA <-  metaRender(renderPrint, {Count_Row(..(CNA_data()))})
# Mutation
# 5) Input MAF File from cBioPortal: can specify header, sep, quote and Tab3_Segment_CNA_Yes_or_No of lines to skip (default = tab, double quote, skip 1)
#   dataInputMAF <- metaReactive2({req(input$Input_MAF_File)
#      metaExpr({read.delim(..(input$Input_MAF_File$datapath), header = ..(input$Tab1_MAF_Header_Yes_or_No), sep = ..(input$Tab1_MAF_Separator), quote = ..(input$Tab1_MAF_Quote), na.strings=c(""," ","NA"), skip=..(input$Tab1_MAF_Skip_Lines), row.names = NULL)})})
#    mutation_files <-  metaReactive2({
#        metaExpr({ names(..(data_cBioPortal()))[grepl("mutation", names(..(data_cBioPortal())))] })
#    })
#
#    MAF_Validated <- metaReactive2({
#        if(is.null(input$Input_MAF_File) & is.null(input$cBioData_rows_selected)){
#            validate(need(!is.null(input$Input_MAF_File) | !is.null(input$cBioData_rows_selected), "Please select cBioPortal dataset or upload your own mutation data."))
#        } else if(!is.null(input$Input_MAF_File) & is.null(input$cBioData_rows_selected)) {
#            validate(need(ncol(dataInputMAF()) > 1, "Inputted file only has one column, please select file delimiters and options carefully."))
#            validate(need("Hugo_Symbol" %in% colnames(dataInputMAF()), "Inputted file does not have Gene information (Hugo_Symbol) - Are you using the right file?"))
#            metaExpr({..(dataInputMAF())})
#        } else if(is.null(input$Input_MAF_File) & !is.null(input$cBioData_rows_selected)){
#            if(length(mutation_files()) == 1){
#                metaExpr({dat <- as.data.frame(..(data_cBioPortal())[[..(mutation_files())]]) %>% mutate(Hugo_Symbol = rownames(..(data_cBioPortal())[[..(mutation_files())]])) %>% dplyr::rename(., Start_Position = start, End_Position = end, Chromosome = seqnames, Tumor_Sample_Barcode = group_name) %>%
#                    select(Hugo_Symbol, everything())
#                validate(need("Hugo_Symbol" %in% colnames(dat), "Selected file does not have Gene information (Hugo_Symbol) - Are you using the right file?"))
#                dat })
#            }  else if(length(mutation_files()) == 0) {
#                validate(need(length(mutation_files()) != 0, "Warning: Selected study has no corresponding mutation data"))
#            } else {
#                validate(need(input$Tab2_MAF_Data != "None Selected", "Study has multiple mutation files, please select one using sidebar"))
#                metaExpr({
#                    dat <-as.data.frame(..(data_cBioPortal())[[..(input$Tab2_MAF_Data)]]) %>% mutate(Hugo_Symbol = rownames(..(data_cBioPortal())[[..(input$Tab2_MAF_Data)]])) %>% dplyr::rename(., Start_Position = start, End_Position = end, Chromosome = seqnames, Tumor_Sample_Barcode = group_name) %>%
#                        select(Hugo_Symbol, everything())
#                    validate(need("Hugo_Symbol" %in% colnames(dat), "Selected file does not have Gene information (Hugo_Symbol) - Are you using the right file?"))
#                    dat })
#            }
#        } else {
#            validate(need(is.null(input$cBioData_rows_selected) |  is.null(input$Input_MAF_File), "Please only select cBioPortal dataset OR upload your mutation own data."))
#        }
#    })
#      output$MAF = metaRender(renderDataTable, {Datatable_func(..(MAF_data()), "660px", select_dt = "multiple")})
#    Tot_MAF_Col <- metaReactive2({ metaExpr({ncol(..(MAF_data())) }) })
#   Tot_MAF_Row <- metaReactive2({ metaExpr({nrow(..(MAF_data())) }) })
output$TotalCMAF <- metaRender(renderPrint, {Count_Col(..(MAF_data()))})
output$TotalRMAF <- metaRender(renderPrint, {Count_Row(..(MAF_data()))})
Tab2_Exploaratory_Tables_Server("tab2_clin_table", clinical_data(), length_px = "450px", select_dt = "multiple")
Tab2_Exploaratory_Tables_Server("tab2_cna_table", CNA_data(), length_px = "450px", select_dt = "multiple")
Tab2_Exploaratory_Tables_Server("tab2_maf_table", MAF_data(), length_px = "450px", select_dt = "multiple")
}
shinyApp(ui, server, ...)
}
#boxSidebar()
GNOSIS()
library(cBioPortalData)
library(shiny)
library(dashboardthemes)
library(fontawesome)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyWidgets)
library(shinycssloaders)
library(shinymeta)
library(DT)
library(tidyverse)
validate <- shiny::validate
tags <- shiny::tags
levels = base::levels
unique = base::unique
sapply = base::sapply
hide = shinyjs::hide
show = shinyjs::show
#boxSidebar()
GNOSIS()
runApp('R')
#boxSidebar()
GNOSIS()
cbio <- cBioPortal(hostname = "www.cbioportal.org", protocol = "https", api. = "/api/api-docs")
as.data.frame(getStudies(cbio))
Tab1_Input_Files_Manual_Server <- function(tab1_input_manual11) {
moduleServer(tab1_input_manual11, function(input, output, session) {
patient_data <- metaReactive2({req(input$Input_Patient_File)
metaExpr({read.delim(
..(input$Input_Patient_File$datapath),
header = ..(input$Tab1_Clin_Header_Yes_or_No),
sep = ..(input$Tab1_Clin_Separator),
quote = ..(input$Tab1_Clin_Quote),
na.strings=c(""," ","NA"),
skip = ..(input$Tab1_Clin_Skip_Lines))})
})
sample_data <- metaReactive2({req(input$Input_Sample_File)
metaExpr({read.delim(
..(input$Input_Sample_File$datapath),
header = ..(input$Tab1_Sample_Header_Yes_or_No),
sep = ..(input$Tab1_Sample_Separator),
quote = ..(input$Tab1_Sample_Quote),
na.strings=c(""," ","NA"),
skip = ..(input$Tab1_Sample_Skip_Lines))})
})
API_data <- metaReactive2({ metaExpr({
cbio <- cBioPortal(hostname = "www.cbioportal.org", protocol = "https", api. = "/api/api-docs")
as.data.frame(getStudies(cbio)) }) })
dataClinical <- metaReactive2({
if(is.null(input$Input_Sample_File) & !is.null(input$Input_Patient_File) & is.null(input$cBioData_rows_selected)) {
validate(need(ncol(patient_data()) > 2, "Inputted file only has one column, please select file delimiters and options carefully."))
validate(need("PATIENT_ID" %in% colnames(patient_data()), "Inputted file does not have PATIENT_ID information - Are you using the right file?"))
metaExpr({..(patient_data())} )}
else if(is.null(input$Input_Patient_File) & !is.null(input$Input_Sample_File) & is.null(input$cBioData_rows_selected)){
validate(need(ncol(sample_data) > 2, "Inputted file only has one column, please select file delimiters and options carefully."))
validate(need("PATIENT_ID" %in% colnames(sample_data), "Inputted file does not have PATIENT_ID information - Are you using the right file?"))
metaExpr({..(sample_data)})
} else if(is.null(input$Input_Sample_File) & is.null(input$Input_Patient_File) & is.null(input$cBioData_rows_selected)){
validate(need(!is.null(input$cBioData_rows_selected) |  !is.null(input$Input_Sample_File) | !is.null(input$Input_Patient_File), "Please select cBioPortal dataset or upload your own data."))
} else if(!is.null(input$Input_Sample_File) & !is.null(input$Input_Patient_File) & is.null(input$cBioData_rows_selected)){
validate(need(ncol(patient_data) > 2, "Inputted file only has one column, please select file delimiters and options carefully."))
validate(need("PATIENT_ID" %in% colnames(patient_data), "Inputted file does not have PATIENT_ID information - Are you using the right file?"))
validate(need(ncol(sample_data) > 2, "Inputted file only has one column, please select file delimiters and options carefully."))
validate(need("PATIENT_ID" %in% colnames(sample_data), "Inputted file does not have PATIENT_ID information - Are you using the right file?"))
metaExpr({merge(..(patient_data), ..(sample_data), by.x = "PATIENT_ID", by.y="PATIENT_ID") })
} else if(is.null(input$Input_Sample_File) & is.null(input$Input_Patient_File) & !is.null(input$cBioData_rows_selected)){
validate(need(!is.null(input$cBioData_rows_selected), "Please select cBioPortal dataset."))
metaExpr({dat <- as.data.frame(..(data_cBioPortal())@colData)
rownames(dat) = NULL
dat})
} else {
validate(need(is.null(input$cBioData_rows_selected) |  c(is.null(input$Input_Sample_File) & is.null(input$Input_Patient_File)), "Please only select cBioPortal dataset OR upload your own data."))
}
})
CNA_data <- metaReactive2({req(input$Input_CNA_File)
metaExpr({read.delim(..(input$Input_CNA_File$datapath), header = ..(input$Tab1_CNA_Header_Yes_or_No), sep = ..(input$Tab1_CNA_Separator), quote = ..(input$Tab1_CNA_Quote), check.names = F, na.strings=c(""," ","NA"), skip=..(input$Tab1_CNA_Skip_Lines))})})
CNA_Validated <- metaReactive2({
if(is.null(input$Input_CNA_File) & is.null(input$cBioData_rows_selected)){
validate(need(!is.null(input$Input_CNA_File) | !is.null(input$cBioData_rows_selected), "Please select cBioPortal dataset or upload your own CNA data."))
} else if(!is.null(input$Input_CNA_File) & is.null(input$cBioData_rows_selected)) {
validate(need(ncol(CNA_data()) > 1, "Inputted file only has one column, please select file delimiters and options carefully."))
validate(need("Hugo_Symbol" %in% colnames(CNA_data()), "Inputted file does not have Gene information (Hugo_Symbol) - Are you using the right file?"))
metaExpr({..(CNA_data())})
} else if(is.null(input$Input_CNA_File) & !is.null(input$cBioData_rows_selected)){
if(length(cna_files()) == 1){
if(cna_files() == "cna_hg19.seg"){
validate(need(cna_files() != "cna_hg19.seg", "Warning: CNA file is not compatible, please upload a different CNA file."))
} else {
validate(need("Hugo_Symbol" %in% colnames(assays(data_cBioPortal())[[cna_files()]]), "Selected file does not have Gene information (Hugo_Symbol) - Are you using the right file?"))
metaExpr({ assays(..(data_cBioPortal()))[[..(cna_files())]] })
}
}  else if(length(cna_files()) == 0) {
validate(need(length(cna_files()) != 0, "Warning: Selected study has no corresponding CNA data"))
} else {
validate(need(input$Tab2_CNA_Data != "None Selected", "Study has multiple CNA files, please select one using sidebar"))
if(input$Tab2_CNA_Data == "cna_hg19.seg"){
validate(need(input$Tab2_CNA_Data != "cna_hg19.seg", "Warning: CNA file is not compatible, please upload a different CNA file."))
} else {
metaExpr({
dat <- as.data.frame(assays(..(data_cBioPortal()))[[..(input$Tab2_CNA_Data)]]) %>% mutate(Hugo_Symbol = rownames(.)) %>% select(Hugo_Symbol, everything())
rownames(dat) <- NULL
validate(need("Hugo_Symbol" %in% colnames(dat), "Selected file does not have Gene information (Hugo_Symbol) - Are you using the right file?"))
dat })
}
}
} else {
validate(need(is.null(input$cBioData_rows_selected) |  is.null(input$Input_CNA_File), "Please only select cBioPortal dataset OR upload your own data."))
}
})
MAF_data <- metaReactive2({req(input$Input_MAF_File)
metaExpr({read.delim(..(input$Input_MAF_File$datapath), header = ..(input$Tab1_MAF_Header_Yes_or_No), sep = ..(input$Tab1_MAF_Separator), quote = ..(input$Tab1_MAF_Quote), na.strings=c(""," ","NA"), skip=..(input$Tab1_MAF_Skip_Lines), row.names = NULL)})})
#  MAF_Validated <- metaReactive2({
#        if(is.null(input$Input_MAF_File) & is.null(input$cBioData_rows_selected)){
#            validate(need(!is.null(input$Input_MAF_File) | !is.null(input$cBioData_rows_selected), "Please select cBioPortal dataset or upload your own mutation data."))
#        } else if(!is.null(input$Input_MAF_File) & is.null(input$cBioData_rows_selected)) {
#            validate(need(ncol(dataInputMAF()) > 1, "Inputted file only has one column, please select file delimiters and options carefully."))
#            validate(need("Hugo_Symbol" %in% colnames(dataInputMAF()), "Inputted file does not have Gene information (Hugo_Symbol) - Are you using the right file?"))
#            metaExpr({..(dataInputMAF())})
#        } else if(is.null(input$Input_MAF_File) & !is.null(input$cBioData_rows_selected)){
#            if(length(mutation_files()) == 1){
#                metaExpr({dat <- as.data.frame(..(data_cBioPortal())[[..(mutation_files())]]) %>% mutate(Hugo_Symbol = rownames(..(data_cBioPortal())[[..(mutation_files())]])) %>% dplyr::rename(., Start_Position = start, End_Position = end, Chromosome = seqnames, Tumor_Sample_Barcode = group_name) %>%
#                    select(Hugo_Symbol, everything())
#                validate(need("Hugo_Symbol" %in% colnames(dat), "Selected file does not have Gene information (Hugo_Symbol) - Are you using the right file?"))
#                dat })
#            }  else if(length(mutation_files()) == 0) {
#                validate(need(length(mutation_files()) != 0, "Warning: Selected study has no corresponding mutation data"))
#            } else {
#                validate(need(input$Tab2_MAF_Data != "None Selected", "Study has multiple mutation files, please select one using sidebar"))
#                metaExpr({
#                    dat <-as.data.frame(..(data_cBioPortal())[[..(input$Tab2_MAF_Data)]]) %>% mutate(Hugo_Symbol = rownames(..(data_cBioPortal())[[..(input$Tab2_MAF_Data)]])) %>% dplyr::rename(., Start_Position = start, End_Position = end, Chromosome = seqnames, Tumor_Sample_Barcode = group_name) %>%
#                        select(Hugo_Symbol, everything())
#                    validate(need("Hugo_Symbol" %in% colnames(dat), "Selected file does not have Gene information (Hugo_Symbol) - Are you using the right file?"))
#                    dat })
#            }
#        } else {
#            validate(need(is.null(input$cBioData_rows_selected) |  is.null(input$Input_MAF_File), "Please only select cBioPortal dataset OR upload your mutation own data."))
#        }
#    })
list(patient_data, sample_data, dataClinical, CNA_data, CNA_Validated, MAF_data, API_data)
})
}
runApp('R')
#boxSidebar()
GNOSIS()
#boxSidebar()
GNOSIS()
#boxSidebar()
GNOSIS()
library(dashboardthemes)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyWidgets)
library(shinycssloaders)
library(shinymeta)
#boxSidebar()
GNOSIS()
library(shiny)
#boxSidebar()
GNOSIS()
library(fontawesome)
#boxSidebar()
GNOSIS()
runApp('R')
devtools::install_github("r-lib/conflicted")
library(conflicted)
#boxSidebar()
GNOSIS()
conflicted::conflicts_prefer(shinydashboardPlus::dashboardPage)
#boxSidebar()
GNOSIS()
conflicts_prefer(shinydashboardPlus::dashboardHeader)
library(cBioPortalData)
#boxSidebar()
GNOSIS()
conflicts_prefer(shinydashboardPlus::dashboardSidebar)
#boxSidebar()
GNOSIS()
conflicts_prefer(shinydashboardPlus::box)
#boxSidebar()
GNOSIS()
conflicts_prefer(shiny::renderDataTable)
#boxSidebar()
GNOSIS()
detach("package:AnVIL", unload = TRUE)
library(roxygen2); # Read in the roxygen2 R package
roxygenise();
GNOSIS <- function(...) {
tags <- shiny::tags
validate <- shiny::validate
levels = base::levels
unique = base::unique
sapply = base::sapply
hide = shinyjs::hide
show = shinyjs::show
#  source("/home/lydia/PhD_Insync/PhD_Project/Shiny_App_Code/GNOSIS/R/Setup.R")
ui <- dashboardPage(
# Set title, title width, logo
header = dashboardHeader(title = tagList(span(class = "logo-lg", "GNOSIS"))),
# Create side-bar menu with all tab options:
sidebar = dashboardSidebar(tags$style(".left-side, .main-sidebar {padding-top: 60px}"), width = 195,
GNOSIS_sidebarUI("sidebar")),
# Set up theme - use custom theme and import css file
body = dashboardBody(
shinyDashboardThemes(theme = "blue_gradient"),
tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "Style_File.css")),
tags$head(tags$style(HTML('.wrapper {height: auto !important; position:relative; overflow-x:hidden; overflow-y:hidden}'))),
## Tab 1) Input Data Files
# Input File Tab: Space to upload desired files (Clinical Patient and Sample, CNA Scores and MAF) or use cBioPortal API to select study
tabItems(tabItem(tabName = "input_files_1", tabBox(width = "1000px", Tab1_Input_Files_Manual_UI("tab1_input"),
Tab1_Input_Files_API_UI("tab1_inputAPI"))),
tabItem(tabName = "input_files_2", tabBox(width = "1000px",
Tab1_Input_Files_Preview_Clin_UI("tab1_input_preview_1"),
Tab1_Input_Files_Preview_CNA_UI("tab1_input_preview_2"),
Tab1_Input_Files_Preview_MAF_UI("tab1_input_preview_3"))),
## Tab 2 -  Tables
# Exploratory Table Tab: Space to explore uploaded data -> choose 5 columns to study
tabItem(tabName = "tables",
tabBox(width = "1000px",
Tab2_Exploaratory_Tables_Clin_UI("tab2_clin_table"),
Tab2_Exploaratory_Tables_CNA_UI("tab2_cna_table"),
Tab2_Exploaratory_Tables_MAF_UI("tab2_maf_table"))))
))
server <- function(input, output, session) {
## For Input Log
#  track_usage(store_null(console = FALSE))
## Tab 1 - Input Files (Upload ourselves or use API)
# 1) Input Clinical Patient File from cBioPortal: can specify header, sep, quote and Tab3_Segment_CNA_Yes_or_No of lines to skip (default = tab, double quote, skip 4)
# 2) Input Clinical Sample File from cBioPortal: can specify header, sep, quote and Tab3_Segment_CNA_Yes_or_No of lines to skip (default = tab, double quote, skip 4)
# 3) Merge two files (patient and sample -> clinical data) -> Make sure PATIENT ID column exists
# 4) Input CNA File from cBioPortal: can specify header, sep, quote and Tab3_Segment_CNA_Yes_or_No of lines to skip (default = tab, double quote, skip 0)
# 5) Input MAF File from cBioPortal: can specify header, sep, quote and Tab3_Segment_CNA_Yes_or_No of lines to skip (default = tab, double quote, skip 1)
# 6) API data
# Function to select row from cBioPortal Data
selectedLine <- reactive({
if (is.null(input$`tab1_inputAPI-cBioData_rows_selected`)) {
return(NULL)
} else {
rows_selected <- as.numeric(input$`tab1_inputAPI-cBioData_rows_selected`) # we need to prefix dt_table_rows_selected with the ID of the UI function "my_ID" and a hyphen
}
})
patient_manual_data <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[1]]
sample_manual_data <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[2]]
cna_manual_data <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[3]]
maf_manual_data <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[4]]
clinical_data <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[5]]
CNA_data <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[6]]
MAF_data <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[7]]
API_select <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[8]]
# Tab 1 - Input Data Files
## Row/Column
output$TotalC <- metaRender(renderPrint, {Count_Col(..(patient_manual_data()))})
output$TotalR <- metaRender(renderPrint, {Count_Row(..(patient_manual_data()))})
output$TotalC1 <- metaRender(renderPrint, {Count_Col(..(sample_manual_data()))})
output$TotalR2 <- metaRender(renderPrint, {Count_Row(..(sample_manual_data()))})
output$TotalCCNA <- metaRender(renderPrint, {Count_Col(..(cna_manual_data()))})
output$TotalRCNA <-  metaRender(renderPrint, {Count_Row(..(cna_manual_data()))})
output$TotalCMAF <- metaRender(renderPrint, {Count_Col(..(maf_manual_data()))})
output$TotalRMAF <- metaRender(renderPrint, {Count_Row(..(maf_manual_data()))})
## API study dataframe
Tab1_API_Files_Server("tab1_inputAPI")
## Data Preview
Tab1_Input_Files_Preview_Server("tab1_input_preview_1", clinical_data(), length_px = "650px", select_dt = "multiple")
Tab1_Input_Files_Preview_Server("tab1_input_preview_2", CNA_data(), length_px = "650px", select_dt = "multiple")
Tab1_Input_Files_Preview_Server("tab1_input_preview_3", MAF_data(), length_px = "650px", select_dt = "multiple")
# Tab 2 - Exploratory Tables Tab
## Tables
Tab2_Exploratory_Tables_Server("tab2_clin_table", clinical_data(), length_px = "450px", select_dt = "multiple")
Tab2_Exploratory_Tables_Server("tab2_cna_table", CNA_data(), length_px = "450px", select_dt = "multiple")
Tab2_Exploratory_Tables_Server("tab2_maf_table", MAF_data(), length_px = "450px", select_dt = "multiple")
}
shinyApp(ui, server, ...)
}
library(roxygen2); # Read in the roxygen2 R package
roxygenise();
GNOSIS <- function(...) {
#  source("/home/lydia/PhD_Insync/PhD_Project/Shiny_App_Code/GNOSIS/R/Setup.R")
ui <- dashboardPage(
# Set title, title width, logo
header = dashboardHeader(title = tagList(span(class = "logo-lg", "GNOSIS"))),
# Create side-bar menu with all tab options:
sidebar = dashboardSidebar(tags$style(".left-side, .main-sidebar {padding-top: 60px}"), width = 195,
GNOSIS_sidebarUI("sidebar")),
# Set up theme - use custom theme and import css file
body = dashboardBody(
shinyDashboardThemes(theme = "blue_gradient"),
tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "Style_File.css")),
tags$head(tags$style(HTML('.wrapper {height: auto !important; position:relative; overflow-x:hidden; overflow-y:hidden}'))),
## Tab 1) Input Data Files
# Input File Tab: Space to upload desired files (Clinical Patient and Sample, CNA Scores and MAF) or use cBioPortal API to select study
tabItems(tabItem(tabName = "input_files_1", tabBox(width = "1000px", Tab1_Input_Files_Manual_UI("tab1_input"),
Tab1_Input_Files_API_UI("tab1_inputAPI"))),
tabItem(tabName = "input_files_2", tabBox(width = "1000px",
Tab1_Input_Files_Preview_Clin_UI("tab1_input_preview_1"),
Tab1_Input_Files_Preview_CNA_UI("tab1_input_preview_2"),
Tab1_Input_Files_Preview_MAF_UI("tab1_input_preview_3"))),
## Tab 2 -  Tables
# Exploratory Table Tab: Space to explore uploaded data -> choose 5 columns to study
tabItem(tabName = "tables",
tabBox(width = "1000px",
Tab2_Exploaratory_Tables_Clin_UI("tab2_clin_table"),
Tab2_Exploaratory_Tables_CNA_UI("tab2_cna_table"),
Tab2_Exploaratory_Tables_MAF_UI("tab2_maf_table"))))
))
server <- function(input, output, session) {
## For Input Log
#  track_usage(store_null(console = FALSE))
## Tab 1 - Input Files (Upload ourselves or use API)
# 1) Input Clinical Patient File from cBioPortal: can specify header, sep, quote and Tab3_Segment_CNA_Yes_or_No of lines to skip (default = tab, double quote, skip 4)
# 2) Input Clinical Sample File from cBioPortal: can specify header, sep, quote and Tab3_Segment_CNA_Yes_or_No of lines to skip (default = tab, double quote, skip 4)
# 3) Merge two files (patient and sample -> clinical data) -> Make sure PATIENT ID column exists
# 4) Input CNA File from cBioPortal: can specify header, sep, quote and Tab3_Segment_CNA_Yes_or_No of lines to skip (default = tab, double quote, skip 0)
# 5) Input MAF File from cBioPortal: can specify header, sep, quote and Tab3_Segment_CNA_Yes_or_No of lines to skip (default = tab, double quote, skip 1)
# 6) API data
# Function to select row from cBioPortal Data
selectedLine <- reactive({
if (is.null(input$`tab1_inputAPI-cBioData_rows_selected`)) {
return(NULL)
} else {
rows_selected <- as.numeric(input$`tab1_inputAPI-cBioData_rows_selected`) # we need to prefix dt_table_rows_selected with the ID of the UI function "my_ID" and a hyphen
}
})
patient_manual_data <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[1]]
sample_manual_data <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[2]]
cna_manual_data <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[3]]
maf_manual_data <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[4]]
clinical_data <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[5]]
CNA_data <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[6]]
MAF_data <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[7]]
API_select <- Tab1_Input_Files_Manual_Server("tab1_input", rowselect = selectedLine)[[8]]
# Tab 1 - Input Data Files
## Row/Column
output$TotalC <- metaRender(renderPrint, {Count_Col(..(patient_manual_data()))})
output$TotalR <- metaRender(renderPrint, {Count_Row(..(patient_manual_data()))})
output$TotalC1 <- metaRender(renderPrint, {Count_Col(..(sample_manual_data()))})
output$TotalR2 <- metaRender(renderPrint, {Count_Row(..(sample_manual_data()))})
output$TotalCCNA <- metaRender(renderPrint, {Count_Col(..(cna_manual_data()))})
output$TotalRCNA <-  metaRender(renderPrint, {Count_Row(..(cna_manual_data()))})
output$TotalCMAF <- metaRender(renderPrint, {Count_Col(..(maf_manual_data()))})
output$TotalRMAF <- metaRender(renderPrint, {Count_Row(..(maf_manual_data()))})
## API study dataframe
Tab1_API_Files_Server("tab1_inputAPI")
## Data Preview
Tab1_Input_Files_Preview_Server("tab1_input_preview_1", clinical_data(), length_px = "650px", select_dt = "multiple")
Tab1_Input_Files_Preview_Server("tab1_input_preview_2", CNA_data(), length_px = "650px", select_dt = "multiple")
Tab1_Input_Files_Preview_Server("tab1_input_preview_3", MAF_data(), length_px = "650px", select_dt = "multiple")
# Tab 2 - Exploratory Tables Tab
## Tables
Tab2_Exploratory_Tables_Server("tab2_clin_table", clinical_data(), length_px = "450px", select_dt = "multiple")
Tab2_Exploratory_Tables_Server("tab2_cna_table", CNA_data(), length_px = "450px", select_dt = "multiple")
Tab2_Exploratory_Tables_Server("tab2_maf_table", MAF_data(), length_px = "450px", select_dt = "multiple")
}
shinyApp(ui, server, ...)
}
library(roxygen2); # Read in the roxygen2 R package
roxygenise();
library(roxygen2); # Read in the roxygen2 R package
roxygenise();
